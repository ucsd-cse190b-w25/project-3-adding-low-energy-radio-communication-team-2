
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ec  080042ec  000061b8  2**0
                  CONTENTS
  4 .ARM          00000008  080042ec  080042ec  000052ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042f4  080042f4  000061b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f8  080042f8  000052f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  080042fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001b8  080044b4  000061b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080044b4  000064ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a88f  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3c  00000000  00000000  00010a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000129b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072c  00000000  00000000  00013360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027706  00000000  00000000  00013a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3b5  00000000  00000000  0003b192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1286  00000000  00000000  00046547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001377cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aac  00000000  00000000  00137810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  0013a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004230 	.word	0x08004230

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	08004230 	.word	0x08004230

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fb22 	bl	80038d0 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f91f 	bl	80004e8 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f99e 	bl	80005fc <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fbdc 	bl	8001a94 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fafd 	bl	80038e0 <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fab9 	bl	8000868 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fae6 	bl	80038e0 <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 faa2 	bl	8000868 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 faba 	bl	80038e0 <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb3c 	bl	80009f4 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 faa6 	bl	80038e0 <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa62 	bl	8000868 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fa8f 	bl	80038e0 <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa4b 	bl	8000868 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fa78 	bl	80038e0 <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa34 	bl	8000868 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fa61 	bl	80038e0 <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f9a3 	bl	8000768 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa6a 	bl	8000900 <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa9a 	bl	8000970 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa92 	bl	8000970 <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002ec 	.word	0x200002ec
 8000458:	200002f0 	.word	0x200002f0
 800045c:	20000000 	.word	0x20000000
 8000460:	200002ea 	.word	0x200002ea
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001d4 	.word	0x200001d4
 8000478:	200001d8 	.word	0x200001d8
 800047c:	200001dc 	.word	0x200001dc
 8000480:	20000120 	.word	0x20000120
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	2000007c 	.word	0x2000007c
 8000498:	20000058 	.word	0x20000058
 800049c:	200002e0 	.word	0x200002e0
 80004a0:	20000128 	.word	0x20000128
 80004a4:	200002e8 	.word	0x200002e8
 80004a8:	20000148 	.word	0x20000148
 80004ac:	200002e4 	.word	0x200002e4
 80004b0:	20000138 	.word	0x20000138

080004b4 <standbyBle>:
 
 void standbyBle() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af02      	add	r7, sp, #8
	  //STANDBY MODE
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
 80004ba:	2300      	movs	r3, #0
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2307      	movs	r3, #7
 80004c0:	4a06      	ldr	r2, [pc, #24]	@ (80004dc <standbyBle+0x28>)
 80004c2:	2104      	movs	r1, #4
 80004c4:	4806      	ldr	r0, [pc, #24]	@ (80004e0 <standbyBle+0x2c>)
 80004c6:	f000 f9cf 	bl	8000868 <BLE_command>
	  }
	  free(rxEvent);
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <standbyBle+0x30>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 fa06 	bl	80038e0 <free>
 }
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000050 	.word	0x20000050
 80004e0:	2000004c 	.word	0x2000004c
 80004e4:	200002ec 	.word	0x200002ec

080004e8 <fetchBleEvent>:
 
 int fetchBleEvent(uint8_t *container, int size){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	@ 0x30
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004f2:	4a3d      	ldr	r2, [pc, #244]	@ (80005e8 <fetchBleEvent+0x100>)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fc:	6018      	str	r0, [r3, #0]
 80004fe:	3304      	adds	r3, #4
 8000500:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000502:	2140      	movs	r1, #64	@ 0x40
 8000504:	4839      	ldr	r0, [pc, #228]	@ (80005ec <fetchBleEvent+0x104>)
 8000506:	f001 fdc5 	bl	8002094 <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d065      	beq.n	80005dc <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 8000510:	2005      	movs	r0, #5
 8000512:	f001 fabf 	bl	8001a94 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051c:	4834      	ldr	r0, [pc, #208]	@ (80005f0 <fetchBleEvent+0x108>)
 800051e:	f001 fdd1 	bl	80020c4 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000522:	f107 0210 	add.w	r2, r7, #16
 8000526:	f107 0118 	add.w	r1, r7, #24
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2305      	movs	r3, #5
 8000530:	4830      	ldr	r0, [pc, #192]	@ (80005f4 <fetchBleEvent+0x10c>)
 8000532:	f002 fe47 	bl	80031c4 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053c:	482c      	ldr	r0, [pc, #176]	@ (80005f0 <fetchBleEvent+0x108>)
 800053e:	f001 fdc1 	bl	80020c4 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 faa6 	bl	8001a94 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054e:	4828      	ldr	r0, [pc, #160]	@ (80005f0 <fetchBleEvent+0x108>)
 8000550:	f001 fdb8 	bl	80020c4 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000554:	f107 0210 	add.w	r2, r7, #16
 8000558:	f107 0118 	add.w	r1, r7, #24
 800055c:	2301      	movs	r3, #1
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2305      	movs	r3, #5
 8000562:	4824      	ldr	r0, [pc, #144]	@ (80005f4 <fetchBleEvent+0x10c>)
 8000564:	f002 fe2e 	bl	80031c4 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	461a      	mov	r2, r3
 800056c:	7d3b      	ldrb	r3, [r7, #20]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	4313      	orrs	r3, r2
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000574:	23ff      	movs	r3, #255	@ 0xff
 8000576:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	dd01      	ble.n	8000584 <fetchBleEvent+0x9c>
	   dataSize=size;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000586:	2b00      	cmp	r3, #0
 8000588:	dd1f      	ble.n	80005ca <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
 800058e:	e00d      	b.n	80005ac <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	441a      	add	r2, r3
 8000596:	f107 010f 	add.w	r1, r7, #15
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	4814      	ldr	r0, [pc, #80]	@ (80005f4 <fetchBleEvent+0x10c>)
 80005a2:	f002 fe0f 	bl	80031c4 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	3301      	adds	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
 80005ac:	6a3a      	ldr	r2, [r7, #32]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbed      	blt.n	8000590 <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ba:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <fetchBleEvent+0x108>)
 80005bc:	f001 fd82 	bl	80020c4 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <fetchBleEvent+0x110>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e00a      	b.n	80005e0 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <fetchBleEvent+0x108>)
 80005d2:	f001 fd77 	bl	80020c4 <HAL_GPIO_WritePin>
		 return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e001      	b.n	80005e0 <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005dc:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005e0:	4618      	mov	r0, r3
 80005e2:	3728      	adds	r7, #40	@ 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08004248 	.word	0x08004248
 80005ec:	48001000 	.word	0x48001000
 80005f0:	48000c00 	.word	0x48000c00
 80005f4:	200002f4 	.word	0x200002f4
 80005f8:	200002f0 	.word	0x200002f0

080005fc <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	 int j=0;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e00f      	b.n	8000632 <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	440b      	add	r3, r1
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d002      	beq.n	800062c <checkEventResp+0x30>
			 return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	e007      	b.n	800063c <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3301      	adds	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbeb      	blt.n	8000612 <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 800063a:	2300      	movs	r3, #0
 }
 800063c:	4618      	mov	r0, r3
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000652:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <sendCommand+0x88>)
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	3304      	adds	r3, #4
 8000660:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000668:	481a      	ldr	r0, [pc, #104]	@ (80006d4 <sendCommand+0x8c>)
 800066a:	f001 fd2b 	bl	80020c4 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800066e:	f107 0208 	add.w	r2, r7, #8
 8000672:	f107 0110 	add.w	r1, r7, #16
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2305      	movs	r3, #5
 800067c:	4816      	ldr	r0, [pc, #88]	@ (80006d8 <sendCommand+0x90>)
 800067e:	f002 fda1 	bl	80031c4 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	7a7a      	ldrb	r2, [r7, #9]
 8000688:	4313      	orrs	r3, r2
 800068a:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	db09      	blt.n	80006a8 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <sendCommand+0x90>)
 800069e:	f002 fc1c 	bl	8002eda <HAL_SPI_Transmit>
		 result=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	e002      	b.n	80006ae <sendCommand+0x66>
	   }else{
		 result=-1;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <sendCommand+0x8c>)
 80006b6:	f001 fd05 	bl	80020c4 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <sendCommand+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1cd      	bne.n	8000662 <sendCommand+0x1a>
 
 }
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08004250 	.word	0x08004250
 80006d4:	48000c00 	.word	0x48000c00
 80006d8:	200002f4 	.word	0x200002f4
 80006dc:	200002f0 	.word	0x200002f0

080006e0 <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006ea:	217f      	movs	r1, #127	@ 0x7f
 80006ec:	4819      	ldr	r0, [pc, #100]	@ (8000754 <catchBLE+0x74>)
 80006ee:	f7ff fefb 	bl	80004e8 <fetchBleEvent>
 80006f2:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d128      	bne.n	800074c <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006fa:	2203      	movs	r2, #3
 80006fc:	4916      	ldr	r1, [pc, #88]	@ (8000758 <catchBLE+0x78>)
 80006fe:	4815      	ldr	r0, [pc, #84]	@ (8000754 <catchBLE+0x74>)
 8000700:	f7ff ff7c 	bl	80005fc <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000704:	2205      	movs	r2, #5
 8000706:	4915      	ldr	r1, [pc, #84]	@ (800075c <catchBLE+0x7c>)
 8000708:	4812      	ldr	r0, [pc, #72]	@ (8000754 <catchBLE+0x74>)
 800070a:	f7ff ff77 	bl	80005fc <checkEventResp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <catchBLE+0x74>)
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	b21a      	sxth	r2, r3
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <catchBLE+0x80>)
 800071c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <catchBLE+0x74>)
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <catchBLE+0x80>)
 8000726:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 8000728:	2205      	movs	r2, #5
 800072a:	490e      	ldr	r1, [pc, #56]	@ (8000764 <catchBLE+0x84>)
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <catchBLE+0x74>)
 800072e:	f7ff ff65 	bl	80005fc <checkEventResp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d009      	beq.n	800074c <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <catchBLE+0x74>)
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <catchBLE+0x80>)
 8000740:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <catchBLE+0x74>)
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <catchBLE+0x80>)
 800074a:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001e0 	.word	0x200001e0
 8000758:	200000f8 	.word	0x200000f8
 800075c:	20000104 	.word	0x20000104
 8000760:	20000158 	.word	0x20000158
 8000764:	2000010c 	.word	0x2000010c

08000768 <setConnectable>:
 
 void setConnectable(){
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800076e:	200c      	movs	r0, #12
 8000770:	f003 f8ae 	bl	80038d0 <malloc>
 8000774:	4603      	mov	r3, r0
 8000776:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4a37      	ldr	r2, [pc, #220]	@ (8000858 <setConnectable+0xf0>)
 800077c:	6810      	ldr	r0, [r2, #0]
 800077e:	6018      	str	r0, [r3, #0]
 8000780:	8891      	ldrh	r1, [r2, #4]
 8000782:	7992      	ldrb	r2, [r2, #6]
 8000784:	8099      	strh	r1, [r3, #4]
 8000786:	719a      	strb	r2, [r3, #6]
 		localname[sizeof(deviceName)+1]=0x00;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3308      	adds	r3, #8
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3309      	adds	r3, #9
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	330a      	adds	r3, #10
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	330b      	adds	r3, #11
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3307      	adds	r3, #7
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80007b0:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <setConnectable+0xf4>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80007b6:	4b29      	ldr	r3, [pc, #164]	@ (800085c <setConnectable+0xf4>)
 80007b8:	2215      	movs	r2, #21
 80007ba:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80007bc:	2019      	movs	r0, #25
 80007be:	f003 f887 	bl	80038d0 <malloc>
 80007c2:	4603      	mov	r3, r0
 80007c4:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4a24      	ldr	r2, [pc, #144]	@ (800085c <setConnectable+0xf4>)
 80007ca:	461c      	mov	r4, r3
 80007cc:	4613      	mov	r3, r2
 80007ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007d0:	6020      	str	r0, [r4, #0]
 80007d2:	6061      	str	r1, [r4, #4]
 80007d4:	60a2      	str	r2, [r4, #8]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	330d      	adds	r3, #13
 80007de:	220c      	movs	r2, #12
 80007e0:	68f9      	ldr	r1, [r7, #12]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f996 	bl	8003b14 <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007e8:	2007      	movs	r0, #7
 80007ea:	f003 f871 	bl	80038d0 <malloc>
 80007ee:	4603      	mov	r3, r0
 80007f0:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007f2:	2107      	movs	r1, #7
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fe77 	bl	80004e8 <fetchBleEvent>
 80007fa:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007fc:	2119      	movs	r1, #25
 80007fe:	68b8      	ldr	r0, [r7, #8]
 8000800:	f7ff ff22 	bl	8000648 <sendCommand>
 		HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f001 f945 	bl	8001a94 <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 800080a:	2107      	movs	r1, #7
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fe6b 	bl	80004e8 <fetchBleEvent>
 8000812:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10e      	bne.n	8000838 <setConnectable+0xd0>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 800081a:	2207      	movs	r2, #7
 800081c:	4910      	ldr	r1, [pc, #64]	@ (8000860 <setConnectable+0xf8>)
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff feec 	bl	80005fc <checkEventResp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d106      	bne.n	8000838 <setConnectable+0xd0>
 			  stackInitCompleteFlag|=0x80;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <setConnectable+0xfc>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <setConnectable+0xfc>)
 8000836:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f003 f851 	bl	80038e0 <free>
 		free(discoverableCommand);
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f003 f84e 	bl	80038e0 <free>
 		free(localname);
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f003 f84b 	bl	80038e0 <free>
 		HAL_Delay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f001 f922 	bl	8001a94 <HAL_Delay>
  }
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	20000120 	.word	0x20000120
 800085c:	20000084 	.word	0x20000084
 8000860:	20000094 	.word	0x20000094
 8000864:	200002ea 	.word	0x200002ea

08000868 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff fee5 	bl	8000648 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	005a      	lsls	r2, r3, #1
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f822 	bl	80038d0 <malloc>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <BLE_command+0x90>)
 8000892:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000898:	e007      	b.n	80008aa <BLE_command+0x42>
			contatore++;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	3301      	adds	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80008a6:	4293      	cmp	r3, r2
 80008a8:	dc07      	bgt.n	80008ba <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008aa:	2140      	movs	r1, #64	@ 0x40
 80008ac:	4813      	ldr	r0, [pc, #76]	@ (80008fc <BLE_command+0x94>)
 80008ae:	f001 fbf1 	bl	8002094 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f0      	beq.n	800089a <BLE_command+0x32>
 80008b8:	e000      	b.n	80008bc <BLE_command+0x54>
				break;
 80008ba:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <BLE_command+0x90>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	005a      	lsls	r2, r3, #1
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	f7ff fe0d 	bl	80004e8 <fetchBleEvent>
 80008ce:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <BLE_command+0x90>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe8c 	bl	80005fc <checkEventResp>
 80008e4:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f001 f8d4 	bl	8001a94 <HAL_Delay>
 
 
	 return response;
 80008ec:	697b      	ldr	r3, [r7, #20]
 }
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002ec 	.word	0x200002ec
 80008fc:	48001000 	.word	0x48001000

08000900 <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <addService+0x60>)
 800090e:	2210      	movs	r2, #16
 8000910:	68f9      	ldr	r1, [r7, #12]
 8000912:	4618      	mov	r0, r3
 8000914:	f003 f8fe 	bl	8003b14 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <addService+0x64>)
 800091e:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000920:	2301      	movs	r3, #1
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2307      	movs	r3, #7
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <addService+0x68>)
 8000928:	2117      	movs	r1, #23
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <addService+0x64>)
 800092c:	f7ff ff9c 	bl	8000868 <BLE_command>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10a      	bne.n	800094c <addService+0x4c>
			handle[0]=rxEvent[7];
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <addService+0x6c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	79da      	ldrb	r2, [r3, #7]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <addService+0x6c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3301      	adds	r3, #1
 8000948:	7a12      	ldrb	r2, [r2, #8]
 800094a:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <addService+0x6c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f002 ffc5 	bl	80038e0 <free>
 }
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000a1 	.word	0x200000a1
 8000964:	2000009c 	.word	0x2000009c
 8000968:	200000b4 	.word	0x200000b4
 800096c:	200002ec 	.word	0x200002ec

08000970 <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <addCharacteristic+0x74>)
 8000980:	2210      	movs	r2, #16
 8000982:	68f9      	ldr	r1, [r7, #12]
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f8c5 	bl	8003b14 <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <addCharacteristic+0x78>)
 8000990:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	785a      	ldrb	r2, [r3, #1]
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <addCharacteristic+0x78>)
 8000998:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 800099a:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <addCharacteristic+0x78>)
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 80009a0:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <addCharacteristic+0x78>)
 80009a2:	7e3b      	ldrb	r3, [r7, #24]
 80009a4:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80009a6:	2301      	movs	r3, #1
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2307      	movs	r3, #7
 80009ac:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <addCharacteristic+0x7c>)
 80009ae:	211e      	movs	r1, #30
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <addCharacteristic+0x78>)
 80009b2:	f7ff ff59 	bl	8000868 <BLE_command>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10a      	bne.n	80009d2 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <addCharacteristic+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	79da      	ldrb	r2, [r3, #7]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <addCharacteristic+0x80>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3301      	adds	r3, #1
 80009ce:	7a12      	ldrb	r2, [r2, #8]
 80009d0:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <addCharacteristic+0x80>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 ff82 	bl	80038e0 <free>
 }
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c3 	.word	0x200000c3
 80009e8:	200000bc 	.word	0x200000bc
 80009ec:	200000dc 	.word	0x200000dc
 80009f0:	200002ec 	.word	0x200002ec

080009f4 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3306      	adds	r3, #6
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <updateCharValue+0x9c>)
 8000a0c:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <updateCharValue+0x9c>)
 8000a14:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	785a      	ldrb	r2, [r3, #1]
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <updateCharValue+0x9c>)
 8000a1c:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <updateCharValue+0x9c>)
 8000a24:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	785a      	ldrb	r2, [r3, #1]
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <updateCharValue+0x9c>)
 8000a2c:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <updateCharValue+0x9c>)
 8000a34:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <updateCharValue+0x9c>)
 8000a3c:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	330a      	adds	r3, #10
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 ff44 	bl	80038d0 <malloc>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4910      	ldr	r1, [pc, #64]	@ (8000a90 <updateCharValue+0x9c>)
 8000a50:	6978      	ldr	r0, [r7, #20]
 8000a52:	f003 f85f 	bl	8003b14 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	330a      	adds	r3, #10
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	6a39      	ldr	r1, [r7, #32]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 f858 	bl	8003b14 <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f103 010a 	add.w	r1, r3, #10
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2307      	movs	r3, #7
 8000a70:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <updateCharValue+0xa0>)
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff fef8 	bl	8000868 <BLE_command>
 
	 free(commandComplete);
 8000a78:	6978      	ldr	r0, [r7, #20]
 8000a7a:	f002 ff31 	bl	80038e0 <free>
	 free(rxEvent);
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <updateCharValue+0xa4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 ff2c 	bl	80038e0 <free>
 }
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000e4 	.word	0x200000e4
 8000a94:	200000dc 	.word	0x200000dc
 8000a98:	200002ec 	.word	0x200002ec

08000a9c <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000aa2:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <disconnectBLE+0x98>)
 8000aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d105      	bne.n	8000aba <disconnectBLE+0x1e>
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <disconnectBLE+0x98>)
 8000ab0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d037      	beq.n	8000b2a <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <disconnectBLE+0x9c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <disconnectBLE+0x98>)
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <disconnectBLE+0x98>)
 8000acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000ad4:	2313      	movs	r3, #19
 8000ad6:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000ad8:	1d38      	adds	r0, r7, #4
 8000ada:	2300      	movs	r3, #0
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2307      	movs	r3, #7
 8000ae0:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <disconnectBLE+0xa0>)
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	f7ff fec0 	bl	8000868 <BLE_command>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d11e      	bne.n	8000b2c <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000aee:	217f      	movs	r1, #127	@ 0x7f
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <disconnectBLE+0xa4>)
 8000af2:	f7ff fcf9 	bl	80004e8 <fetchBleEvent>
 8000af6:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10f      	bne.n	8000b1e <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000afe:	2204      	movs	r2, #4
 8000b00:	4910      	ldr	r1, [pc, #64]	@ (8000b44 <disconnectBLE+0xa8>)
 8000b02:	480f      	ldr	r0, [pc, #60]	@ (8000b40 <disconnectBLE+0xa4>)
 8000b04:	f7ff fd7a 	bl	80005fc <checkEventResp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d107      	bne.n	8000b1e <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <disconnectBLE+0x98>)
 8000b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b14:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <disconnectBLE+0x98>)
 8000b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1c:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <disconnectBLE+0xac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fedc 	bl	80038e0 <free>
 8000b28:	e000      	b.n	8000b2c <disconnectBLE+0x90>
		return;
 8000b2a:	bf00      	nop
	 }
 }
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000158 	.word	0x20000158
 8000b38:	200000f4 	.word	0x200000f4
 8000b3c:	200000fc 	.word	0x200000fc
 8000b40:	200001e0 	.word	0x200001e0
 8000b44:	200000f8 	.word	0x200000f8
 8000b48:	200002ec 	.word	0x200002ec

08000b4c <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d102      	bne.n	8000b62 <setDiscoverability+0x16>
		 setConnectable();
 8000b5c:	f7ff fe04 	bl	8000768 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b60:	e00f      	b.n	8000b82 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10c      	bne.n	8000b82 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <setDiscoverability+0x40>)
 8000b70:	2104      	movs	r1, #4
 8000b72:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <setDiscoverability+0x44>)
 8000b74:	f7ff fe78 	bl	8000868 <BLE_command>
		 free(rxEvent);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <setDiscoverability+0x48>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 feaf 	bl	80038e0 <free>
 }
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000118 	.word	0x20000118
 8000b90:	20000114 	.word	0x20000114
 8000b94:	200002ec 	.word	0x200002ec

08000b98 <i2c_init>:
/* Include memory map of our MCU */
#include <stm32l475xx.h>
#include <stdio.h>

void i2c_init()
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	// Enable clock for GPIOB
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <i2c_init+0xa4>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <i2c_init+0xa4>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // Configure PB10 (SCL) and PB11 (SDA) as alternate function mode (AF4 for I2C2)
    GPIOB->MODER &= ~(GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 8000ba8:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <i2c_init+0xa8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a24      	ldr	r2, [pc, #144]	@ (8000c40 <i2c_init+0xa8>)
 8000bae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bb2:	6013      	str	r3, [r2, #0]
    // Set to Alternate Function mode
    GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <i2c_init+0xa8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <i2c_init+0xa8>)
 8000bba:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000bbe:	6013      	str	r3, [r2, #0]

    // Configure open-drain, high-speed,and enable pull-up
    GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <i2c_init+0xa8>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c40 <i2c_init+0xa8>)
 8000bc6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000bca:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <i2c_init+0xa8>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <i2c_init+0xa8>)
 8000bd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd6:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10_Msk | GPIO_PUPDR_PUPD11_Msk);
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <i2c_init+0xa8>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a18      	ldr	r2, [pc, #96]	@ (8000c40 <i2c_init+0xa8>)
 8000bde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000be2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <i2c_init+0xa8>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <i2c_init+0xa8>)
 8000bea:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000bee:	60d3      	str	r3, [r2, #12]

    // Set AF4 (I2C2) for PB10 and PB11
    GPIOB->AFR[1] &= ~((0xF << GPIO_AFRH_AFSEL10_Pos) | (0xF << GPIO_AFRH_AFSEL11_Pos));
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <i2c_init+0xa8>)
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf4:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <i2c_init+0xa8>)
 8000bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000bfa:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL10_Pos) | (4 << GPIO_AFRH_AFSEL11_Pos));
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <i2c_init+0xa8>)
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <i2c_init+0xa8>)
 8000c02:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000c06:	6253      	str	r3, [r2, #36]	@ 0x24

    // Enable the I2C clock by stopping it, setting the timer, and enabling.
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <i2c_init+0xa4>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <i2c_init+0xa4>)
 8000c0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c12:	6593      	str	r3, [r2, #88]	@ 0x58
    I2C2->CR1 &= ~I2C_CR1_PE;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <i2c_init+0xac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <i2c_init+0xac>)
 8000c1a:	f023 0301 	bic.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]
    // Timing set to a frequency of 250 KHz.
    I2C2->TIMINGR = (0 << 28) | (0x3 << 0) | (0x3 << 8) | (0x3 << 16) | (0x3 << 20);
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <i2c_init+0xac>)
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <i2c_init+0xb0>)
 8000c24:	611a      	str	r2, [r3, #16]
//    I2C2->TIMINGR = (0 << 28) | (2 << 20) | (2 << 16) | (4 << 8) | (4 << 0);
    I2C2->CR1 |= I2C_CR1_PE;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <i2c_init+0xac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <i2c_init+0xac>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000400 	.word	0x48000400
 8000c44:	40005800 	.word	0x40005800
 8000c48:	00330303 	.word	0x00330303

08000c4c <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	603a      	str	r2, [r7, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71bb      	strb	r3, [r7, #6]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	717b      	strb	r3, [r7, #5]
    // Write
	if (dir == 0) {
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d13a      	bne.n	8000cde <i2c_transaction+0x92>
        I2C2->CR2 = (address << 1) | (0 << 10) | (len << 16) | I2C_CR2_START; // Write mode
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	005a      	lsls	r2, r3, #1
 8000c6c:	797b      	ldrb	r3, [r7, #5]
 8000c6e:	041b      	lsls	r3, r3, #16
 8000c70:	4313      	orrs	r3, r2
 8000c72:	4a55      	ldr	r2, [pc, #340]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000c74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c78:	6053      	str	r3, [r2, #4]

        // For each byte of data (the first would be the address on the peripheral), write the data.
        for (uint8_t i = 0; i < len; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e022      	b.n	8000cc6 <i2c_transaction+0x7a>
        	// Wait for TXIS flag. If NACK during this operation, return an error.
			while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) {
				if (I2C2->ISR & I2C_ISR_NACKF) {
 8000c80:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00d      	beq.n	8000ca8 <i2c_transaction+0x5c>
					// Clear NACKF and send STOP because operation failed.
					I2C2->ICR |= I2C_ICR_NACKCF;
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	61d3      	str	r3, [r2, #28]
					I2C2->CR2 |= I2C_CR2_STOP;
 8000c98:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca2:	6053      	str	r3, [r2, #4]
					return 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e088      	b.n	8000dba <i2c_transaction+0x16e>
			while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) {
 8000ca8:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0312 	and.w	r3, r3, #18
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0e5      	beq.n	8000c80 <i2c_transaction+0x34>
				}
			}
			// Write the data.
			I2C2->TXDR = data[i];
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	797b      	ldrb	r3, [r7, #5]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3ec      	bcc.n	8000ca8 <i2c_transaction+0x5c>
		}
        // Wait for the transfer complete flag.
		while (!(I2C2->ISR & I2C_ISR_TC));
 8000cce:	bf00      	nop
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f9      	beq.n	8000cd0 <i2c_transaction+0x84>
 8000cdc:	e059      	b.n	8000d92 <i2c_transaction+0x146>
    }
    // Read
    else {
        // Send register address by writing one byte (first byte is assumed to be the address).
        I2C2->CR2 = (address << 1) | (0 << 10) | (1 << 16) | I2C_CR2_START;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4a39      	ldr	r2, [pc, #228]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000ce4:	f443 3390 	orr.w	r3, r3, #73728	@ 0x12000
 8000ce8:	6053      	str	r3, [r2, #4]

        while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) {
 8000cea:	e013      	b.n	8000d14 <i2c_transaction+0xc8>
            if (I2C2->ISR & I2C_ISR_NACKF) {
 8000cec:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00d      	beq.n	8000d14 <i2c_transaction+0xc8>
                I2C2->ICR |= I2C_ICR_NACKCF;
 8000cf8:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a32      	ldr	r2, [pc, #200]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	61d3      	str	r3, [r2, #28]
                I2C2->CR2 |= I2C_CR2_STOP;
 8000d04:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6053      	str	r3, [r2, #4]
                return 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	e052      	b.n	8000dba <i2c_transaction+0x16e>
        while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) {
 8000d14:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0312 	and.w	r3, r3, #18
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0e5      	beq.n	8000cec <i2c_transaction+0xa0>
            }
        }
        // Send the register address
        I2C2->TXDR = data[0];
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
        // Wait for transfer complete
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000d28:	bf00      	nop
 8000d2a:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f9      	beq.n	8000d2a <i2c_transaction+0xde>

        // Read `len` bytes from the data received. This uses MMIO.
        I2C2->CR2 = (address << 1) | (1 << 10) | (len << 16) | I2C_CR2_START;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000d3e:	797b      	ldrb	r3, [r7, #5]
 8000d40:	041b      	lsls	r3, r3, #16
 8000d42:	4313      	orrs	r3, r2
 8000d44:	4a20      	ldr	r2, [pc, #128]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d4a:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73bb      	strb	r3, [r7, #14]
 8000d50:	e01b      	b.n	8000d8a <i2c_transaction+0x13e>
        	// Wait for RXNE flag.
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000d52:	bf00      	nop
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f9      	beq.n	8000d54 <i2c_transaction+0x108>
            data[i] = I2C2->RXDR;
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]

            // Send NACK before last byte to signal that reading is complete.
            if (i == len - 1) {
 8000d6e:	7bba      	ldrb	r2, [r7, #14]
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d105      	bne.n	8000d84 <i2c_transaction+0x138>
                I2C2->CR2 |= I2C_CR2_NACK;
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d82:	6053      	str	r3, [r2, #4]
        for (uint8_t i = 0; i < len; i++) {
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	3301      	adds	r3, #1
 8000d88:	73bb      	strb	r3, [r7, #14]
 8000d8a:	7bba      	ldrb	r2, [r7, #14]
 8000d8c:	797b      	ldrb	r3, [r7, #5]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3df      	bcc.n	8000d52 <i2c_transaction+0x106>
            }
        }
    }

	// Set stop, wait until stop is detected, then clear the flag.
	I2C2->CR2 |= I2C_CR2_STOP;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9c:	6053      	str	r3, [r2, #4]
	while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000d9e:	bf00      	nop
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f9      	beq.n	8000da0 <i2c_transaction+0x154>
	I2C2->ICR |= I2C_ICR_STOPCF;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <i2c_transaction+0x17c>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	61d3      	str	r3, [r2, #28]

    return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40005800 	.word	0x40005800

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	@ (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	@ (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <lptimer_init>:

#include "lptimer.h"


void lptimer_init()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	RCC->CIER |= RCC_CIER_LSIRDYIE;
 8000e60:	4b41      	ldr	r3, [pc, #260]	@ (8000f68 <lptimer_init+0x10c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a40      	ldr	r2, [pc, #256]	@ (8000f68 <lptimer_init+0x10c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
    // Clear LSIRDYF flag by setting LSIRDYC (bit 23 of RCC_CSR)
    RCC->CICR |= RCC_CICR_LSIRDYC;
 8000e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f68 <lptimer_init+0x10c>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a3d      	ldr	r2, [pc, #244]	@ (8000f68 <lptimer_init+0x10c>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6213      	str	r3, [r2, #32]
    RCC->CSR |= RCC_CSR_LSION;
 8000e78:	4b3b      	ldr	r3, [pc, #236]	@ (8000f68 <lptimer_init+0x10c>)
 8000e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f68 <lptimer_init+0x10c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    while ((RCC->CSR & RCC_CSR_LSIRDY) == 0);
 8000e88:	bf00      	nop
 8000e8a:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <lptimer_init+0x10c>)
 8000e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f8      	beq.n	8000e8a <lptimer_init+0x2e>
    while ((RCC->CIFR & RCC_CIFR_LSIRDYF) == 0);
 8000e98:	bf00      	nop
 8000e9a:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <lptimer_init+0x10c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f9      	beq.n	8000e9a <lptimer_init+0x3e>

    // Select LSI as the clock source for LPTIM1
    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL;
 8000ea6:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <lptimer_init+0x10c>)
 8000ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eac:	4a2e      	ldr	r2, [pc, #184]	@ (8000f68 <lptimer_init+0x10c>)
 8000eae:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000eb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0;  // 01: LSI clock
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <lptimer_init+0x10c>)
 8000eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f68 <lptimer_init+0x10c>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8000ec6:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <lptimer_init+0x10c>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <lptimer_init+0x10c>)
 8000ecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58

    LPTIM1->CR &= ~LPTIM_CR_ENABLE;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <lptimer_init+0x110>)
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <lptimer_init+0x110>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6113      	str	r3, [r2, #16]

    LPTIM1->CFGR &= ~LPTIM_CFGR_CKSEL;
 8000ede:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <lptimer_init+0x110>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	4a22      	ldr	r2, [pc, #136]	@ (8000f6c <lptimer_init+0x110>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	60d3      	str	r3, [r2, #12]
    LPTIM1->CFGR &= ~LPTIM_CFGR_TRIGEN;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <lptimer_init+0x110>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <lptimer_init+0x110>)
 8000ef0:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8000ef4:	60d3      	str	r3, [r2, #12]
    LPTIM1->CFGR &= ~LPTIM_CFGR_COUNTMODE;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <lptimer_init+0x110>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <lptimer_init+0x110>)
 8000efc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f00:	60d3      	str	r3, [r2, #12]

    // Set prescaler (available values: 1, 2, 4, 8, 16, 32, etc.)
    LPTIM1->CFGR &= ~LPTIM_CFGR_PRESC;  // Clear existing prescaler value
 8000f02:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <lptimer_init+0x110>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	4a19      	ldr	r2, [pc, #100]	@ (8000f6c <lptimer_init+0x110>)
 8000f08:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 8000f0c:	60d3      	str	r3, [r2, #12]
    LPTIM1->CFGR |= LPTIM_CFGR_PRESC_1;  // Set prescaler to 4 (equivalent to 8kHz clock)
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <lptimer_init+0x110>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	4a16      	ldr	r2, [pc, #88]	@ (8000f6c <lptimer_init+0x110>)
 8000f14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f18:	60d3      	str	r3, [r2, #12]

    // Enable interrupt
    LPTIM1->IER |= LPTIM_IER_ARRMIE;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <lptimer_init+0x110>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <lptimer_init+0x110>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(LPTIM1_IRQn);
 8000f26:	2041      	movs	r0, #65	@ 0x41
 8000f28:	f7ff ff50 	bl	8000dcc <__NVIC_EnableIRQ>
    NVIC_SetPriority(LPTIM1_IRQn, 1);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2041      	movs	r0, #65	@ 0x41
 8000f30:	f7ff ff6a 	bl	8000e08 <__NVIC_SetPriority>

    LPTIM1->IER |= LPTIM_IER_ARROKIE;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <lptimer_init+0x110>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <lptimer_init+0x110>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6093      	str	r3, [r2, #8]

    LPTIM1->CR |= LPTIM_CR_ENABLE;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <lptimer_init+0x110>)
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <lptimer_init+0x110>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6113      	str	r3, [r2, #16]
    __NOP();
 8000f4c:	bf00      	nop
    __NOP();
 8000f4e:	bf00      	nop

    // Set Auto-reload value for 1ms interrupt (ARR = (8kHz * 1ms) - 1 = 7)
    LPTIM1->ARR = 7999;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <lptimer_init+0x110>)
 8000f52:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f56:	619a      	str	r2, [r3, #24]

    // Start LPTIM in continuous mode
    LPTIM1->CR |= LPTIM_CR_CNTSTRT;
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <lptimer_init+0x110>)
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <lptimer_init+0x110>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6113      	str	r3, [r2, #16]
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40007c00 	.word	0x40007c00

08000f70 <lsm6dsl_init>:

// Address of accelerometer.
#define ACC_ADDR 0x6A

void lsm6dsl_init()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
	// Write 0x60 to CTRL1_XL at 0x10.
	uint8_t ctrl1_xl_data[] = {0x10, 0x60};
 8000f76:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000f7a:	80bb      	strh	r3, [r7, #4]
	uint8_t transaction = i2c_transaction(ACC_ADDR, 0, ctrl1_xl_data, 2);
 8000f7c:	1d3a      	adds	r2, r7, #4
 8000f7e:	2302      	movs	r3, #2
 8000f80:	2100      	movs	r1, #0
 8000f82:	206a      	movs	r0, #106	@ 0x6a
 8000f84:	f7ff fe62 	bl	8000c4c <i2c_transaction>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
	if (transaction > 0) {return;}
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10d      	bne.n	8000fae <lsm6dsl_init+0x3e>

	// Write 0x01 to INT1_CTRL at 0x0d.
	uint8_t int1_ctrl_data[] = {0x0d, 0x01};
 8000f92:	f240 130d 	movw	r3, #269	@ 0x10d
 8000f96:	803b      	strh	r3, [r7, #0]
	transaction = i2c_transaction(ACC_ADDR, 0, int1_ctrl_data, 2);
 8000f98:	463a      	mov	r2, r7
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	206a      	movs	r0, #106	@ 0x6a
 8000fa0:	f7ff fe54 	bl	8000c4c <i2c_transaction>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
	if (transaction > 0) {return;}
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	e000      	b.n	8000fb0 <lsm6dsl_init+0x40>
	if (transaction > 0) {return;}
 8000fae:	bf00      	nop
}
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
	// Initialize addr_or_data to be the byte that contains the address of the register, then the data read from the register.
	uint8_t addr_or_data[1];
	uint8_t t;
	// Reading x first:
	*addr_or_data = 0x28; // Address of x_low
 8000fc2:	2328      	movs	r3, #40	@ 0x28
 8000fc4:	753b      	strb	r3, [r7, #20]
	t = i2c_transaction(ACC_ADDR, 1, addr_or_data, 1);
 8000fc6:	f107 0214 	add.w	r2, r7, #20
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2101      	movs	r1, #1
 8000fce:	206a      	movs	r0, #106	@ 0x6a
 8000fd0:	f7ff fe3c 	bl	8000c4c <i2c_transaction>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
	if (t > 0) {return;}
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d170      	bne.n	80010c0 <lsm6dsl_read_xyz+0x10a>
	*x = (int16_t)(addr_or_data[0]);
 8000fde:	7d3b      	ldrb	r3, [r7, #20]
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	801a      	strh	r2, [r3, #0]

	*addr_or_data = 0x29; // Address of x_high
 8000fe6:	2329      	movs	r3, #41	@ 0x29
 8000fe8:	753b      	strb	r3, [r7, #20]
	t = i2c_transaction(ACC_ADDR, 1, addr_or_data, 1);
 8000fea:	f107 0214 	add.w	r2, r7, #20
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	206a      	movs	r0, #106	@ 0x6a
 8000ff4:	f7ff fe2a 	bl	8000c4c <i2c_transaction>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	75fb      	strb	r3, [r7, #23]
	if (t > 0) {return;}
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d160      	bne.n	80010c4 <lsm6dsl_read_xyz+0x10e>
	*x |= (int16_t)(addr_or_data[0] << 8);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001008:	7d3b      	ldrb	r3, [r7, #20]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	801a      	strh	r2, [r3, #0]


	// Reading y next:
	*addr_or_data = 0x2A; // Address of y_low
 8001016:	232a      	movs	r3, #42	@ 0x2a
 8001018:	753b      	strb	r3, [r7, #20]
	t = i2c_transaction(ACC_ADDR, 1, addr_or_data, 1);
 800101a:	f107 0214 	add.w	r2, r7, #20
 800101e:	2301      	movs	r3, #1
 8001020:	2101      	movs	r1, #1
 8001022:	206a      	movs	r0, #106	@ 0x6a
 8001024:	f7ff fe12 	bl	8000c4c <i2c_transaction>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
	if (t > 0) {return;}
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d14a      	bne.n	80010c8 <lsm6dsl_read_xyz+0x112>
	*y = (int16_t)(addr_or_data[0]);
 8001032:	7d3b      	ldrb	r3, [r7, #20]
 8001034:	b21a      	sxth	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	801a      	strh	r2, [r3, #0]

	*addr_or_data = 0x2B; // Address of y_high
 800103a:	232b      	movs	r3, #43	@ 0x2b
 800103c:	753b      	strb	r3, [r7, #20]
	t = i2c_transaction(ACC_ADDR, 1, addr_or_data, 1);
 800103e:	f107 0214 	add.w	r2, r7, #20
 8001042:	2301      	movs	r3, #1
 8001044:	2101      	movs	r1, #1
 8001046:	206a      	movs	r0, #106	@ 0x6a
 8001048:	f7ff fe00 	bl	8000c4c <i2c_transaction>
 800104c:	4603      	mov	r3, r0
 800104e:	75fb      	strb	r3, [r7, #23]
	if (t > 0) {return;}
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d13a      	bne.n	80010cc <lsm6dsl_read_xyz+0x116>
	*y |= (int16_t)(addr_or_data[0] << 8);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f9b3 2000 	ldrsh.w	r2, [r3]
 800105c:	7d3b      	ldrb	r3, [r7, #20]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	801a      	strh	r2, [r3, #0]


	// Reading z next:
	*addr_or_data = 0x2C; // Address of z_low
 800106a:	232c      	movs	r3, #44	@ 0x2c
 800106c:	753b      	strb	r3, [r7, #20]
	t = i2c_transaction(ACC_ADDR, 1, addr_or_data, 1);
 800106e:	f107 0214 	add.w	r2, r7, #20
 8001072:	2301      	movs	r3, #1
 8001074:	2101      	movs	r1, #1
 8001076:	206a      	movs	r0, #106	@ 0x6a
 8001078:	f7ff fde8 	bl	8000c4c <i2c_transaction>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]
	if (t > 0) {return;}
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d124      	bne.n	80010d0 <lsm6dsl_read_xyz+0x11a>
	*z = (int16_t)(addr_or_data[0]);
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	b21a      	sxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	801a      	strh	r2, [r3, #0]

	*addr_or_data = 0x2D; // Address of z_high
 800108e:	232d      	movs	r3, #45	@ 0x2d
 8001090:	753b      	strb	r3, [r7, #20]
	t = i2c_transaction(ACC_ADDR, 1, addr_or_data, 1);
 8001092:	f107 0214 	add.w	r2, r7, #20
 8001096:	2301      	movs	r3, #1
 8001098:	2101      	movs	r1, #1
 800109a:	206a      	movs	r0, #106	@ 0x6a
 800109c:	f7ff fdd6 	bl	8000c4c <i2c_transaction>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75fb      	strb	r3, [r7, #23]
	if (t > 0) {return;}
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <lsm6dsl_read_xyz+0x11e>
	*z |= (int16_t)(addr_or_data[0] << 8);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010b0:	7d3b      	ldrb	r3, [r7, #20]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	801a      	strh	r2, [r3, #0]
 80010be:	e00a      	b.n	80010d6 <lsm6dsl_read_xyz+0x120>
	if (t > 0) {return;}
 80010c0:	bf00      	nop
 80010c2:	e008      	b.n	80010d6 <lsm6dsl_read_xyz+0x120>
	if (t > 0) {return;}
 80010c4:	bf00      	nop
 80010c6:	e006      	b.n	80010d6 <lsm6dsl_read_xyz+0x120>
	if (t > 0) {return;}
 80010c8:	bf00      	nop
 80010ca:	e004      	b.n	80010d6 <lsm6dsl_read_xyz+0x120>
	if (t > 0) {return;}
 80010cc:	bf00      	nop
 80010ce:	e002      	b.n	80010d6 <lsm6dsl_read_xyz+0x120>
	if (t > 0) {return;}
 80010d0:	bf00      	nop
 80010d2:	e000      	b.n	80010d6 <lsm6dsl_read_xyz+0x120>
	if (t > 0) {return;}
 80010d4:	bf00      	nop

}
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <TIM2_IRQHandler>:
        ITM_SendChar(*ptr++);
    }
    return len;
}

void TIM2_IRQHandler() {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	// Checking whether TIM2 has had an update event, and then clearing the update event every time it happens.
    if (TIM2->SR & TIM_SR_UIF) {
 80010e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d014      	beq.n	8001118 <TIM2_IRQHandler+0x3c>
        TIM2->SR &= ~TIM_SR_UIF;
 80010ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6113      	str	r3, [r2, #16]

        start_i++;
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <TIM2_IRQHandler+0x48>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <TIM2_IRQHandler+0x48>)
 8001106:	6013      	str	r3, [r2, #0]

        // Ensure that the counter does not go out of bounds, and resets smoothly.
        // Note: UINT8_MAX * 60 represents the start_i value at which the mins_lost value overflows and resets to 1.
        // We round down UINT_MAX to the highest multiple of this overflow value to ensure that the timer resets without breaking the pattern.
        if (start_i == (UINT_MAX - (UINT_MAX % (UINT8_MAX * 60)))) {
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <TIM2_IRQHandler+0x48>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <TIM2_IRQHandler+0x4c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d102      	bne.n	8001118 <TIM2_IRQHandler+0x3c>
            start_i = 60;
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <TIM2_IRQHandler+0x48>)
 8001114:	223c      	movs	r2, #60	@ 0x3c
 8001116:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000358 	.word	0x20000358
 8001128:	ffffcf30 	.word	0xffffcf30

0800112c <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler() {
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    if (LPTIM1->ISR & LPTIM_ISR_ARRM)
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <LPTIM1_IRQHandler+0x58>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d012      	beq.n	8001162 <LPTIM1_IRQHandler+0x36>
    {
        // Clear the interrupt flag
        LPTIM1->ICR |= LPTIM_ICR_ARRMCF;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <LPTIM1_IRQHandler+0x58>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <LPTIM1_IRQHandler+0x58>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	6053      	str	r3, [r2, #4]
        start_i++;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <LPTIM1_IRQHandler+0x5c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <LPTIM1_IRQHandler+0x5c>)
 8001150:	6013      	str	r3, [r2, #0]

        // Ensure that the counter does not go out of bounds, and resets smoothly.
        // Note: UINT8_MAX * 60 represents the start_i value at which the mins_lost value overflows and resets to 1.
        // We round down UINT_MAX to the highest multiple of this overflow value to ensure that the timer resets without breaking the pattern.
        if (start_i == (UINT_MAX - (UINT_MAX % (UINT8_MAX * 60)))) {
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <LPTIM1_IRQHandler+0x5c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LPTIM1_IRQHandler+0x60>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d102      	bne.n	8001162 <LPTIM1_IRQHandler+0x36>
            start_i = 60;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <LPTIM1_IRQHandler+0x5c>)
 800115e:	223c      	movs	r2, #60	@ 0x3c
 8001160:	601a      	str	r2, [r3, #0]
        }
    }
    if (LPTIM1->ISR & LPTIM_ISR_ARROK){
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <LPTIM1_IRQHandler+0x58>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <LPTIM1_IRQHandler+0x4e>
    	LPTIM1->ICR |= LPTIM_ICR_ARROKCF;
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <LPTIM1_IRQHandler+0x58>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <LPTIM1_IRQHandler+0x58>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6053      	str	r3, [r2, #4]
    }
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40007c00 	.word	0x40007c00
 8001188:	20000358 	.word	0x20000358
 800118c:	ffffcf30 	.word	0xffffcf30

08001190 <disable_all_peripherals>:

void disable_all_peripherals() {
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

	RCC->CR &= ~(
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <disable_all_peripherals+0x9c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a24      	ldr	r2, [pc, #144]	@ (800122c <disable_all_peripherals+0x9c>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011a2:	6013      	str	r3, [r2, #0]
		RCC_CR_HSION |
		RCC_CR_HSEON
	);

	RCC->AHB1ENR &= ~(
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <disable_all_peripherals+0x9c>)
 80011a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011a8:	4920      	ldr	r1, [pc, #128]	@ (800122c <disable_all_peripherals+0x9c>)
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <disable_all_peripherals+0xa0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	648b      	str	r3, [r1, #72]	@ 0x48
		RCC_AHB1ENR_FLASHEN |
		RCC_AHB1ENR_CRCEN |
		RCC_APB1ENR1_DAC1EN
	);

	RCC->AHB2ENR &= ~(
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <disable_all_peripherals+0x9c>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <disable_all_peripherals+0x9c>)
 80011b6:	f423 5303 	bic.w	r3, r3, #8384	@ 0x20c0
 80011ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
		RCC_AHB2ENR_GPIOGEN |
		RCC_AHB2ENR_GPIOHEN |
		RCC_AHB2ENR_ADCEN
	);

	RCC->APB1ENR1 &= ~(
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <disable_all_peripherals+0x9c>)
 80011c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011c4:	4919      	ldr	r1, [pc, #100]	@ (800122c <disable_all_peripherals+0x9c>)
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <disable_all_peripherals+0xa4>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	658b      	str	r3, [r1, #88]	@ 0x58
		RCC_APB1ENR1_I2C1EN |
		RCC_APB1ENR1_I2C2EN |
		RCC_APB1ENR1_I2C3EN
	);

	RCC->APB2ENR &= ~(
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <disable_all_peripherals+0x9c>)
 80011ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d0:	4a16      	ldr	r2, [pc, #88]	@ (800122c <disable_all_peripherals+0x9c>)
 80011d2:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6613      	str	r3, [r2, #96]	@ 0x60
		RCC_APB2ENR_TIM1EN |
		RCC_APB2ENR_TIM8EN
	);

	// Disable USB OTG FS and HS (if applicable)
	RCC->AHB2ENR &= ~RCC_AHB2ENR_OTGFSEN;  // Disable USB OTG FS clock
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <disable_all_peripherals+0x9c>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a12      	ldr	r2, [pc, #72]	@ (800122c <disable_all_peripherals+0x9c>)
 80011e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Reset USB peripheral
	RCC->AHB2RSTR |= RCC_AHB2RSTR_OTGFSRST;  // Reset USB OTG FS
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <disable_all_peripherals+0x9c>)
 80011ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ec:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <disable_all_peripherals+0x9c>)
 80011ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	RCC->AHB2RSTR &= ~RCC_AHB2RSTR_OTGFSRST; // Release reset
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <disable_all_peripherals+0x9c>)
 80011f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f8:	4a0c      	ldr	r2, [pc, #48]	@ (800122c <disable_all_peripherals+0x9c>)
 80011fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Optional: Set USB pins to Analog mode (if USB is not needed)
	GPIOA->MODER |= (3 << (2 * 11)); // PA11 (USB_DM) as Analog
 8001200:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800120a:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800120e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (3 << (2 * 12)); // PA12 (USB_DP) as Analog
 8001210:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800121a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	dfffeefc 	.word	0xdfffeefc
 8001234:	ff1d3fc0 	.word	0xff1d3fc0

08001238 <enable_some_peripherals>:

void enable_some_peripherals() {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <enable_some_peripherals+0x2c>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001240:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <enable_some_peripherals+0x2c>)
 8001242:	f043 031f 	orr.w	r3, r3, #31
 8001246:	64d3      	str	r3, [r2, #76]	@ 0x4c
		RCC_AHB2ENR_GPIOBEN |
		RCC_AHB2ENR_GPIOCEN |
		RCC_AHB2ENR_GPIODEN |
		RCC_AHB2ENR_GPIOEEN
	);
	RCC->APB1ENR1 |= (
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <enable_some_peripherals+0x2c>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124c:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <enable_some_peripherals+0x2c>)
 800124e:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6593      	str	r3, [r2, #88]	@ 0x58
		RCC_APB1ENR1_TIM6EN |
		RCC_APB1ENR1_SPI3EN |
		RCC_APB1ENR1_I2C2EN
	);
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fb9c 	bl	80019aa <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config(7);
 8001272:	2007      	movs	r0, #7
 8001274:	f000 f93e 	bl	80014f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f9ca 	bl	8001610 <MX_GPIO_Init>
  MX_SPI3_Init();
 800127c:	f000 f98a 	bl	8001594 <MX_SPI3_Init>

  /* Initialize Timer, I2C, and Accelerometer*/
//  timer_init(TIM2, 8);
//  timer_set_ms(TIM2, 1000, 8);
  lptimer_init();
 8001280:	f7ff fdec 	bl	8000e5c <lptimer_init>
  i2c_init();
 8001284:	f7ff fc88 	bl	8000b98 <i2c_init>
  lsm6dsl_init();
 8001288:	f7ff fe72 	bl	8000f70 <lsm6dsl_init>


  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001296:	f000 ff15 	bl	80020c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f000 fbfa 	bl	8001a94 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f000 ff0b 	bl	80020c4 <HAL_GPIO_WritePin>

  ble_init();
 80012ae:	f7fe ffe7 	bl	8000280 <ble_init>

  HAL_Delay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f000 fbee 	bl	8001a94 <HAL_Delay>

  uint8_t nonDiscoverable = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  // Poll the accelerometer using the last known values
  int16_t last_x = 0, last_y = 0, last_z = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80012c2:	2300      	movs	r3, #0
 80012c4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80012c6:	2300      	movs	r3, #0
 80012c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  lsm6dsl_read_xyz(&last_x, &last_y, &last_z);
 80012ca:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 80012ce:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80012d2:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe6d 	bl	8000fb6 <lsm6dsl_read_xyz>
  int16_t data_x = 0, data_y = 0, data_z = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80012e0:	2300      	movs	r3, #0
 80012e2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80012e4:	2300      	movs	r3, #0
 80012e6:	863b      	strh	r3, [r7, #48]	@ 0x30
  int secs_lost = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	643b      	str	r3, [r7, #64]	@ 0x40
  // lost = 0 when not lost, lost = 1 when lost
  uint8_t lost = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  setDiscoverability(0);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fc2a 	bl	8000b4c <setDiscoverability>
  RCC->CFGR &= ~RCC_CFGR_STOPWUCK;
 80012f8:	4b74      	ldr	r3, [pc, #464]	@ (80014cc <main+0x264>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4a73      	ldr	r2, [pc, #460]	@ (80014cc <main+0x264>)
 80012fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001302:	6093      	str	r3, [r2, #8]
  while (1)
  {
      RCC->CFGR &= ~RCC_CFGR_STOPWUCK;
 8001304:	4b71      	ldr	r3, [pc, #452]	@ (80014cc <main+0x264>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a70      	ldr	r2, [pc, #448]	@ (80014cc <main+0x264>)
 800130a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800130e:	6093      	str	r3, [r2, #8]
	  enable_some_peripherals();
 8001310:	f7ff ff92 	bl	8001238 <enable_some_peripherals>
	  HAL_ResumeTick();
 8001314:	f000 fbf2 	bl	8001afc <HAL_ResumeTick>

	  if ((lost == 0 && start_i % 10 == 0) || (lost == 1)) {
 8001318:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <main+0xd2>
 8001320:	4b6b      	ldr	r3, [pc, #428]	@ (80014d0 <main+0x268>)
 8001322:	6819      	ldr	r1, [r3, #0]
 8001324:	4b6b      	ldr	r3, [pc, #428]	@ (80014d4 <main+0x26c>)
 8001326:	fba3 2301 	umull	r2, r3, r3, r1
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	1aca      	subs	r2, r1, r3
 8001336:	2a00      	cmp	r2, #0
 8001338:	d003      	beq.n	8001342 <main+0xda>
 800133a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800133e:	2b01      	cmp	r3, #1
 8001340:	d14a      	bne.n	80013d8 <main+0x170>
		  lsm6dsl_read_xyz(&data_x, &data_y, &data_z);
 8001342:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001346:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 800134a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe31 	bl	8000fb6 <lsm6dsl_read_xyz>
		  // Threshold chosen as 0.1g based on the uncertainty and values given.
	      int threshold = 1639;
 8001354:	f240 6367 	movw	r3, #1639	@ 0x667
 8001358:	63fb      	str	r3, [r7, #60]	@ 0x3c

	      // Loop for if moving
		  if ((abs(last_x - data_x) > threshold || abs(last_y - data_y) > threshold || abs(last_z - data_z) > threshold)) {
 800135a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800135e:	461a      	mov	r2, r3
 8001360:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	bfb8      	it	lt
 800136a:	425b      	neglt	r3, r3
 800136c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800136e:	429a      	cmp	r2, r3
 8001370:	db17      	blt.n	80013a2 <main+0x13a>
 8001372:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001376:	461a      	mov	r2, r3
 8001378:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfb8      	it	lt
 8001382:	425b      	neglt	r3, r3
 8001384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001386:	429a      	cmp	r2, r3
 8001388:	db0b      	blt.n	80013a2 <main+0x13a>
 800138a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800138e:	461a      	mov	r2, r3
 8001390:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800139e:	429a      	cmp	r2, r3
 80013a0:	da11      	bge.n	80013c6 <main+0x15e>
			  // Reset timer since last movement.
			  start_i = 0;
 80013a2:	4b4b      	ldr	r3, [pc, #300]	@ (80014d0 <main+0x268>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
			  lost = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			  disconnectBLE();
 80013ae:	f7ff fb75 	bl	8000a9c <disconnectBLE>
			  if (!nonDiscoverable) {
 80013b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <main+0x15e>
				  setDiscoverability(0);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fbc6 	bl	8000b4c <setDiscoverability>
				  nonDiscoverable = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  }
		  }

		  last_x = data_x;
 80013c6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80013ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
		  last_y = data_y;
 80013cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80013d0:	873b      	strh	r3, [r7, #56]	@ 0x38
		  last_z = data_z;
 80013d2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80013d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	  }

	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80013d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <main+0x18c>
 80013e0:	2140      	movs	r1, #64	@ 0x40
 80013e2:	483d      	ldr	r0, [pc, #244]	@ (80014d8 <main+0x270>)
 80013e4:	f000 fe56 	bl	8002094 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <main+0x18c>
		catchBLE();
 80013ee:	f7ff f977 	bl	80006e0 <catchBLE>
 80013f2:	e005      	b.n	8001400 <main+0x198>
	  } else if (nonDiscoverable) {
 80013f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <main+0x198>
		standbyBle();
 80013fc:	f7ff f85a 	bl	80004b4 <standbyBle>
	  }

	  // Start beaconing at 1 min
	  if (start_i >= 60) {
 8001400:	4b33      	ldr	r3, [pc, #204]	@ (80014d0 <main+0x268>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b3b      	cmp	r3, #59	@ 0x3b
 8001406:	d94f      	bls.n	80014a8 <main+0x240>
		  lost = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		  if (nonDiscoverable) {
 800140e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <main+0x1ba>
			  setDiscoverability(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fb98 	bl	8000b4c <setDiscoverability>
			  nonDiscoverable = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		  }
		  if (start_i % 10 == 0) {
 8001422:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <main+0x268>)
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <main+0x26c>)
 8001428:	fba3 2301 	umull	r2, r3, r3, r1
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	1aca      	subs	r2, r1, r3
 8001438:	2a00      	cmp	r2, #0
 800143a:	d135      	bne.n	80014a8 <main+0x240>
			  secs_lost = start_i;
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <main+0x268>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	643b      	str	r3, [r7, #64]	@ 0x40
			  HAL_Delay(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001446:	f000 fb25 	bl	8001a94 <HAL_Delay>
			  unsigned char lost_str[] = "ArayTag missing for ";
 800144a:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <main+0x274>)
 800144c:	f107 0418 	add.w	r4, r7, #24
 8001450:	461d      	mov	r5, r3
 8001452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800145a:	6020      	str	r0, [r4, #0]
 800145c:	3404      	adds	r4, #4
 800145e:	7021      	strb	r1, [r4, #0]
			  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(lost_str), lost_str);
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe feb3 	bl	80001d0 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	2200      	movs	r2, #0
 8001478:	4919      	ldr	r1, [pc, #100]	@ (80014e0 <main+0x278>)
 800147a:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <main+0x27c>)
 800147c:	f7ff faba 	bl	80009f4 <updateCharValue>
			  unsigned char time_str[20];  // Ensure enough space for the formatted string
			  sprintf(time_str, "%d s", secs_lost);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001484:	4918      	ldr	r1, [pc, #96]	@ (80014e8 <main+0x280>)
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fae0 	bl	8003a4c <siprintf>
			  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(time_str), time_str);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fe9e 	bl	80001d0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	2200      	movs	r2, #0
 80014a0:	490f      	ldr	r1, [pc, #60]	@ (80014e0 <main+0x278>)
 80014a2:	4810      	ldr	r0, [pc, #64]	@ (80014e4 <main+0x27c>)
 80014a4:	f7ff faa6 	bl	80009f4 <updateCharValue>
		  }
	  }
	  HAL_SuspendTick();
 80014a8:	f000 fb18 	bl	8001adc <HAL_SuspendTick>
	  // Wait for interrupt, only uncomment if low power is needed
	  disable_all_peripherals();
 80014ac:	f7ff fe70 	bl	8001190 <disable_all_peripherals>
	  PWR->CR1 |= PWR_CR1_LPMS_STOP2;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <main+0x284>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <main+0x284>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	6013      	str	r3, [r2, #0]
	  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <main+0x288>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <main+0x288>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6113      	str	r3, [r2, #16]
	  __WFI();
 80014c8:	bf30      	wfi
      RCC->CFGR &= ~RCC_CFGR_STOPWUCK;
 80014ca:	e71b      	b.n	8001304 <main+0x9c>
 80014cc:	40021000 	.word	0x40021000
 80014d0:	20000358 	.word	0x20000358
 80014d4:	cccccccd 	.word	0xcccccccd
 80014d8:	48001000 	.word	0x48001000
 80014dc:	08004260 	.word	0x08004260
 80014e0:	200002e8 	.word	0x200002e8
 80014e4:	200002e0 	.word	0x200002e0
 80014e8:	08004258 	.word	0x08004258
 80014ec:	40007000 	.word	0x40007000
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(int MSI_Val)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b098      	sub	sp, #96	@ 0x60
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2244      	movs	r2, #68	@ 0x44
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f002 fac1 	bl	8003a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800151e:	f000 fe1b 	bl	8002158 <HAL_PWREx_ControlVoltageScaling>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x38>
  {
    Error_Handler();
 8001528:	f000 f90a 	bl	8001740 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800152c:	2310      	movs	r3, #16
 800152e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
  // This lines changes system clock frequency
  if (MSI_Val == 7) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d102      	bne.n	8001544 <SystemClock_Config+0x50>
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800153e:	2370      	movs	r3, #112	@ 0x70
 8001540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001542:	e001      	b.n	8001548 <SystemClock_Config+0x54>
  } else {
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fe57 	bl	8002204 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800155c:	f000 f8f0 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fa1e 	bl	80029bc <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001586:	f000 f8db 	bl	8001740 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3760      	adds	r7, #96	@ 0x60
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_SPI3_Init+0x74>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <MX_SPI3_Init+0x78>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015ae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015e2:	2207      	movs	r2, #7
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_SPI3_Init+0x74>)
 80015f4:	f001 fbce 	bl	8002d94 <HAL_SPI_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80015fe:	f000 f89f 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200002f4 	.word	0x200002f4
 800160c:	40003c00 	.word	0x40003c00

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001626:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a42      	ldr	r2, [pc, #264]	@ (8001734 <MX_GPIO_Init+0x124>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b40      	ldr	r3, [pc, #256]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a3c      	ldr	r2, [pc, #240]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <MX_GPIO_Init+0x124>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a36      	ldr	r2, [pc, #216]	@ (8001734 <MX_GPIO_Init+0x124>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a30      	ldr	r2, [pc, #192]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <MX_GPIO_Init+0x124>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a2a      	ldr	r2, [pc, #168]	@ (8001734 <MX_GPIO_Init+0x124>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <MX_GPIO_Init+0x124>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2120      	movs	r1, #32
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f000 fd0d 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b0:	4821      	ldr	r0, [pc, #132]	@ (8001738 <MX_GPIO_Init+0x128>)
 80016b2:	f000 fd07 	bl	80020c4 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f000 fd00 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80016c4:	2340      	movs	r3, #64	@ 0x40
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4818      	ldr	r0, [pc, #96]	@ (800173c <MX_GPIO_Init+0x12c>)
 80016da:	f000 fb31 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80016de:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fa:	f000 fb21 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4808      	ldr	r0, [pc, #32]	@ (8001738 <MX_GPIO_Init+0x128>)
 8001718:	f000 fb12 	bl	8001d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2017      	movs	r0, #23
 8001722:	f000 fad6 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001726:	2017      	movs	r0, #23
 8001728:	f000 faef 	bl	8001d0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	48000c00 	.word	0x48000c00
 800173c:	48001000 	.word	0x48001000

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <Error_Handler+0x8>

0800174c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6613      	str	r3, [r2, #96]	@ 0x60
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_MspInit+0x44>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <HAL_SPI_MspInit+0x7c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d128      	bne.n	8001808 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <HAL_SPI_MspInit+0x80>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_SPI_MspInit+0x80>)
 80017bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_SPI_MspInit+0x80>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_SPI_MspInit+0x80>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_SPI_MspInit+0x80>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_SPI_MspInit+0x80>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017e6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f8:	2306      	movs	r3, #6
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_SPI_MspInit+0x84>)
 8001804:	f000 fa9c 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	@ 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40003c00 	.word	0x40003c00
 8001814:	40021000 	.word	0x40021000
 8001818:	48000800 	.word	0x48000800

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <UsageFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f8ef 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <EXTI9_5_IRQHandler+0x14>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001886:	2040      	movs	r0, #64	@ 0x40
 8001888:	f000 fc34 	bl	80020f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200002f0 	.word	0x200002f0

08001894 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <_sbrk+0x50>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x16>
		heap_end = &end;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <_sbrk+0x50>)
 80018a6:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <_sbrk+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <_sbrk+0x50>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <_sbrk+0x50>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	466a      	mov	r2, sp
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d907      	bls.n	80018ce <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018be:	f002 f8fd 	bl	8003abc <__errno>
 80018c2:	4603      	mov	r3, r0
 80018c4:	220c      	movs	r2, #12
 80018c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	e006      	b.n	80018dc <_sbrk+0x48>
	}

	heap_end += incr;
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_sbrk+0x50>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a03      	ldr	r2, [pc, #12]	@ (80018e4 <_sbrk+0x50>)
 80018d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000035c 	.word	0x2000035c
 80018e8:	200004b0 	.word	0x200004b0

080018ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <SystemInit+0x64>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f6:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <SystemInit+0x64>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <SystemInit+0x68>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a13      	ldr	r2, [pc, #76]	@ (8001954 <SystemInit+0x68>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <SystemInit+0x68>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <SystemInit+0x68>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <SystemInit+0x68>)
 8001918:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800191c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001920:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <SystemInit+0x68>)
 8001924:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001928:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <SystemInit+0x68>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <SystemInit+0x68>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001934:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <SystemInit+0x68>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <SystemInit+0x64>)
 800193e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001942:	609a      	str	r2, [r3, #8]
#endif
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00
 8001954:	40021000 	.word	0x40021000

08001958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001990 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800195c:	f7ff ffc6 	bl	80018ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <LoopForever+0x6>)
  ldr r1, =_edata
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <LoopForever+0xe>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
;  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001978:	4c0a      	ldr	r4, [pc, #40]	@ (80019a4 <LoopForever+0x16>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001986:	f002 f89f 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198a:	f7ff fc6d 	bl	8001268 <main>

0800198e <LoopForever>:

LoopForever:
    b LoopForever
 800198e:	e7fe      	b.n	800198e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 800199c:	080042fc 	.word	0x080042fc
  ldr r2, =_sbss
 80019a0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80019a4:	200004ac 	.word	0x200004ac

080019a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_2_IRQHandler>

080019aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f981 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f80e 	bl	80019dc <HAL_InitTick>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	e001      	b.n	80019d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019cc:	f7ff febe 	bl	800174c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_InitTick+0x6c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d023      	beq.n	8001a38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_InitTick+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f98d 	bl	8001d26 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d809      	bhi.n	8001a2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f000 f957 	bl	8001cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_InitTick+0x74>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e004      	b.n	8001a3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e001      	b.n	8001a3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000164 	.word	0x20000164
 8001a4c:	2000015c 	.word	0x2000015c
 8001a50:	20000160 	.word	0x20000160

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000164 	.word	0x20000164
 8001a78:	20000360 	.word	0x20000360

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000360 	.word	0x20000360

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000164 	.word	0x20000164

08001adc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_SuspendTick+0x1c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <HAL_SuspendTick+0x1c>)
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_ResumeTick+0x1c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <HAL_ResumeTick+0x1c>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <__NVIC_SetPriorityGrouping>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	@ (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	@ (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	@ (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff3e 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff8e 	bl	8001c10 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff31 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	e17f      	b.n	8002050 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8171 	beq.w	800204a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d005      	beq.n	8001d80 <HAL_GPIO_Init+0x40>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d118      	bne.n	8001e20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80ac 	beq.w	800204a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8002070 <HAL_GPIO_Init+0x330>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	@ (8002070 <HAL_GPIO_Init+0x330>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efe:	4b5c      	ldr	r3, [pc, #368]	@ (8002070 <HAL_GPIO_Init+0x330>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <HAL_GPIO_Init+0x334>)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x242>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_GPIO_Init+0x338>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x23e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	@ (800207c <HAL_GPIO_Init+0x33c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x23a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	@ (8002080 <HAL_GPIO_Init+0x340>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x236>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	@ (8002084 <HAL_GPIO_Init+0x344>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x232>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <HAL_GPIO_Init+0x348>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x22e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	@ (800208c <HAL_GPIO_Init+0x34c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x22a>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f82:	2300      	movs	r3, #0
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f94:	4937      	ldr	r1, [pc, #220]	@ (8002074 <HAL_GPIO_Init+0x334>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc6:	4a32      	ldr	r2, [pc, #200]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff0:	4a27      	ldr	r2, [pc, #156]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800201a:	4a1d      	ldr	r2, [pc, #116]	@ (8002090 <HAL_GPIO_Init+0x350>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002020:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002044:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <HAL_GPIO_Init+0x350>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae78 	bne.w	8001d50 <HAL_GPIO_Init+0x10>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40010000 	.word	0x40010000
 8002078:	48000400 	.word	0x48000400
 800207c:	48000800 	.word	0x48000800
 8002080:	48000c00 	.word	0x48000c00
 8002084:	48001000 	.word	0x48001000
 8002088:	48001400 	.word	0x48001400
 800208c:	48001800 	.word	0x48001800
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020fe:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f806 	bl	8002124 <HAL_GPIO_EXTI_Callback>
  }
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <HAL_PWREx_GetVoltageRange+0x18>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40007000 	.word	0x40007000

08002158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002166:	d130      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002174:	d038      	beq.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2232      	movs	r2, #50	@ 0x32
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9b      	lsrs	r3, r3, #18
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219c:	e002      	b.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b0:	d102      	bne.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f2      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c4:	d110      	bne.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e00f      	b.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d6:	d007      	beq.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e0:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000
 80021fc:	2000015c 	.word	0x2000015c
 8002200:	431bde83 	.word	0x431bde83

08002204 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ca      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002216:	4b97      	ldr	r3, [pc, #604]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002220:	4b94      	ldr	r3, [pc, #592]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80e4 	beq.w	8002400 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_RCC_OscConfig+0x4a>
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	f040 808b 	bne.w	800235c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b01      	cmp	r3, #1
 800224a:	f040 8087 	bne.w	800235c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224e:	4b89      	ldr	r3, [pc, #548]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x62>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e3a2      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	4b82      	ldr	r3, [pc, #520]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_RCC_OscConfig+0x7c>
 8002276:	4b7f      	ldr	r3, [pc, #508]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800227e:	e005      	b.n	800228c <HAL_RCC_OscConfig+0x88>
 8002280:	4b7c      	ldr	r3, [pc, #496]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800228c:	4293      	cmp	r3, r2
 800228e:	d223      	bcs.n	80022d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fd1d 	bl	8002cd4 <RCC_SetFlashLatencyFromMSIRange>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e383      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a4:	4b73      	ldr	r3, [pc, #460]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a72      	ldr	r2, [pc, #456]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b70      	ldr	r3, [pc, #448]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	496d      	ldr	r1, [pc, #436]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	4968      	ldr	r1, [pc, #416]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
 80022d6:	e025      	b.n	8002324 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d8:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a65      	ldr	r2, [pc, #404]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b63      	ldr	r3, [pc, #396]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4960      	ldr	r1, [pc, #384]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	495b      	ldr	r1, [pc, #364]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fcdd 	bl	8002cd4 <RCC_SetFlashLatencyFromMSIRange>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e343      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002324:	f000 fc4a 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b52      	ldr	r3, [pc, #328]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	4950      	ldr	r1, [pc, #320]	@ (8002478 <HAL_RCC_OscConfig+0x274>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a4e      	ldr	r2, [pc, #312]	@ (800247c <HAL_RCC_OscConfig+0x278>)
 8002342:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002344:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fb47 	bl	80019dc <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d052      	beq.n	80023fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	e327      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d032      	beq.n	80023ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002364:	4b43      	ldr	r3, [pc, #268]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a42      	ldr	r2, [pc, #264]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002370:	f7ff fb84 	bl	8001a7c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002378:	f7ff fb80 	bl	8001a7c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e310      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238a:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a36      	ldr	r2, [pc, #216]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b34      	ldr	r3, [pc, #208]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4931      	ldr	r1, [pc, #196]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	492c      	ldr	r1, [pc, #176]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
 80023c8:	e01a      	b.n	8002400 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a29      	ldr	r2, [pc, #164]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d6:	f7ff fb51 	bl	8001a7c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023de:	f7ff fb4d 	bl	8001a7c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e2dd      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f0:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x1da>
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d074      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x21a>
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d10e      	bne.n	8002436 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d10b      	bne.n	8002436 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d064      	beq.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d160      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e2ba      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x24a>
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e026      	b.n	800249c <HAL_RCC_OscConfig+0x298>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002456:	d115      	bne.n	8002484 <HAL_RCC_OscConfig+0x280>
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800245e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a02      	ldr	r2, [pc, #8]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x298>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	08004278 	.word	0x08004278
 800247c:	2000015c 	.word	0x2000015c
 8002480:	20000160 	.word	0x20000160
 8002484:	4ba0      	ldr	r3, [pc, #640]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a9f      	ldr	r2, [pc, #636]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b9d      	ldr	r3, [pc, #628]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a9c      	ldr	r2, [pc, #624]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff faea 	bl	8001a7c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fae6 	bl	8001a7c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e276      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	4b92      	ldr	r3, [pc, #584]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x2a8>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff fad6 	bl	8001a7c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fad2 	bl	8001a7c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e262      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e6:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d0>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d060      	beq.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x310>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d119      	bne.n	8002542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d116      	bne.n	8002542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002514:	4b7c      	ldr	r3, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x328>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e23f      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b76      	ldr	r3, [pc, #472]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	4973      	ldr	r1, [pc, #460]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	e040      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d023      	beq.n	8002592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff fa91 	bl	8001a7c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff fa8d 	bl	8001a7c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e21d      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	4b65      	ldr	r3, [pc, #404]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b62      	ldr	r3, [pc, #392]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	495f      	ldr	r1, [pc, #380]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e018      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5c      	ldr	r2, [pc, #368]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff fa6d 	bl	8001a7c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a6:	f7ff fa69 	bl	8001a7c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1f9      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b8:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03c      	beq.n	800264a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01c      	beq.n	8002612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025de:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff fa48 	bl	8001a7c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff fa44 	bl	8001a7c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1d4      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ef      	beq.n	80025f0 <HAL_RCC_OscConfig+0x3ec>
 8002610:	e01b      	b.n	800264a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002618:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7ff fa2b 	bl	8001a7c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7ff fa27 	bl	8001a7c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1b7      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800263c:	4b32      	ldr	r3, [pc, #200]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a6 	beq.w	80027a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	4a26      	ldr	r2, [pc, #152]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002672:	6593      	str	r3, [r2, #88]	@ 0x58
 8002674:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002680:	2301      	movs	r3, #1
 8002682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269c:	f7ff f9ee 	bl	8001a7c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7ff f9ea 	bl	8001a7c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e17a      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_RCC_OscConfig+0x4d8>
 80026ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026da:	e029      	b.n	8002730 <HAL_RCC_OscConfig+0x52c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d115      	bne.n	8002710 <HAL_RCC_OscConfig+0x50c>
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ea:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	4a03      	ldr	r2, [pc, #12]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x52c>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
 8002710:	4b9c      	ldr	r3, [pc, #624]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	4a9b      	ldr	r2, [pc, #620]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002720:	4b98      	ldr	r3, [pc, #608]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	4a97      	ldr	r2, [pc, #604]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d016      	beq.n	8002766 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7ff f9a0 	bl	8001a7c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7ff f99c 	bl	8001a7c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e12a      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	4b8b      	ldr	r3, [pc, #556]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ed      	beq.n	8002740 <HAL_RCC_OscConfig+0x53c>
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff f989 	bl	8001a7c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff f985 	bl	8001a7c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e113      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	4b7f      	ldr	r3, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ed      	bne.n	800276e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002792:	7ffb      	ldrb	r3, [r7, #31]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b7a      	ldr	r3, [pc, #488]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	4a79      	ldr	r2, [pc, #484]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80fe 	beq.w	80029aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f040 80d0 	bne.w	8002958 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027b8:	4b72      	ldr	r3, [pc, #456]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d130      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	3b01      	subs	r3, #1
 80027d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d127      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d11f      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027f8:	2a07      	cmp	r2, #7
 80027fa:	bf14      	ite	ne
 80027fc:	2201      	movne	r2, #1
 80027fe:	2200      	moveq	r2, #0
 8002800:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002802:	4293      	cmp	r3, r2
 8002804:	d113      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d109      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d06e      	beq.n	800290c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d069      	beq.n	8002908 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002834:	4b53      	ldr	r3, [pc, #332]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002840:	4b50      	ldr	r3, [pc, #320]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0ad      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002850:	4b4c      	ldr	r3, [pc, #304]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a4b      	ldr	r2, [pc, #300]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285c:	f7ff f90e 	bl	8001a7c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff f90a 	bl	8001a7c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e09a      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002876:	4b43      	ldr	r3, [pc, #268]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002882:	4b40      	ldr	r3, [pc, #256]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <HAL_RCC_OscConfig+0x784>)
 8002888:	4013      	ands	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002892:	3a01      	subs	r2, #1
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800289c:	0212      	lsls	r2, r2, #8
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0552      	lsls	r2, r2, #21
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028b0:	0852      	lsrs	r2, r2, #1
 80028b2:	3a01      	subs	r2, #1
 80028b4:	0652      	lsls	r2, r2, #25
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028bc:	0912      	lsrs	r2, r2, #4
 80028be:	0452      	lsls	r2, r2, #17
 80028c0:	430a      	orrs	r2, r1
 80028c2:	4930      	ldr	r1, [pc, #192]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e0:	f7ff f8cc 	bl	8001a7c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff f8c8 	bl	8001a7c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e058      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002906:	e050      	b.n	80029aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e04f      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d148      	bne.n	80029aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002924:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002930:	f7ff f8a4 	bl	8001a7c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7ff f8a0 	bl	8001a7c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e030      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x734>
 8002956:	e028      	b.n	80029aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d023      	beq.n	80029a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7ff f887 	bl	8001a7c <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002970:	e00c      	b.n	800298c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7ff f883 	bl	8001a7c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d905      	bls.n	800298c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e013      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
 8002984:	40021000 	.word	0x40021000
 8002988:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x7b0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ec      	bne.n	8002972 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_OscConfig+0x7b0>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4905      	ldr	r1, [pc, #20]	@ (80029b4 <HAL_RCC_OscConfig+0x7b0>)
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_OscConfig+0x7b4>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	60cb      	str	r3, [r1, #12]
 80029a4:	e001      	b.n	80029aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	feeefffc 	.word	0xfeeefffc

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0e7      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b75      	ldr	r3, [pc, #468]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d910      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b72      	ldr	r3, [pc, #456]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4970      	ldr	r1, [pc, #448]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0cf      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	4b66      	ldr	r3, [pc, #408]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d908      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4960      	ldr	r1, [pc, #384]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04c      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a42:	4b5a      	ldr	r3, [pc, #360]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d121      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0a6      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5a:	4b54      	ldr	r3, [pc, #336]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d115      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e09a      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a72:	4b4e      	ldr	r3, [pc, #312]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e08e      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e086      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a92:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f023 0203 	bic.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4943      	ldr	r1, [pc, #268]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa4:	f7fe ffea 	bl	8001a7c <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe ffe6 	bl	8001a7c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e06e      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 020c 	and.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d1eb      	bne.n	8002aac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d208      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b2e      	ldr	r3, [pc, #184]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	492b      	ldr	r1, [pc, #172]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b02:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d210      	bcs.n	8002b32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 0207 	bic.w	r2, r3, #7
 8002b18:	4923      	ldr	r1, [pc, #140]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b20:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e036      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4918      	ldr	r1, [pc, #96]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4910      	ldr	r1, [pc, #64]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b70:	f000 f824 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	490b      	ldr	r1, [pc, #44]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe ff21 	bl	80019dc <HAL_InitTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08004278 	.word	0x08004278
 8002bb4:	2000015c 	.word	0x2000015c
 8002bb8:	20000160 	.word	0x20000160

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bca:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d11e      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf0:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bfc:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c18:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e004      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d134      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0xac>
 8002c60:	e005      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6a:	617b      	str	r3, [r7, #20]
      break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	617b      	str	r3, [r7, #20]
      break;
 8002c72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	3301      	adds	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	0e5b      	lsrs	r3, r3, #25
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	@ 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08004288 	.word	0x08004288
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	007a1200 	.word	0x007a1200

08002cd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cec:	f7ff fa26 	bl	800213c <HAL_PWREx_GetVoltageRange>
 8002cf0:	6178      	str	r0, [r7, #20]
 8002cf2:	e014      	b.n	8002d1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	4a24      	ldr	r2, [pc, #144]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d0c:	f7ff fa16 	bl	800213c <HAL_PWREx_GetVoltageRange>
 8002d10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d24:	d10b      	bne.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b80      	cmp	r3, #128	@ 0x80
 8002d2a:	d919      	bls.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d30:	d902      	bls.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d32:	2302      	movs	r3, #2
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e013      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d38:	2301      	movs	r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e010      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b80      	cmp	r3, #128	@ 0x80
 8002d42:	d902      	bls.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d44:	2303      	movs	r3, #3
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e00a      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b80      	cmp	r3, #128	@ 0x80
 8002d4e:	d102      	bne.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d50:	2302      	movs	r3, #2
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e004      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b70      	cmp	r3, #112	@ 0x70
 8002d5a:	d101      	bne.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 0207 	bic.w	r2, r3, #7
 8002d68:	4909      	ldr	r1, [pc, #36]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d70:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40022000 	.word	0x40022000

08002d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e095      	b.n	8002ed2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002db6:	d009      	beq.n	8002dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
 8002dbe:	e005      	b.n	8002dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fcd4 	bl	8001794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e0c:	d902      	bls.n	8002e14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e002      	b.n	8002e1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e22:	d007      	beq.n	8002e34 <HAL_SPI_Init+0xa0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	ea42 0103 	orr.w	r1, r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	f003 0204 	and.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b088      	sub	sp, #32
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_SPI_Transmit+0x22>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e15f      	b.n	80031bc <HAL_SPI_Transmit+0x2e2>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f04:	f7fe fdba 	bl	8001a7c <HAL_GetTick>
 8002f08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f1e:	e148      	b.n	80031b2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_SPI_Transmit+0x52>
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f30:	e13f      	b.n	80031b2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2203      	movs	r2, #3
 8002f36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7c:	d10f      	bne.n	8002f9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d007      	beq.n	8002fbc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc4:	d94f      	bls.n	8003066 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0xfa>
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d142      	bne.n	800305a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	1c9a      	adds	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff8:	e02f      	b.n	800305a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d112      	bne.n	800302e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800302c:	e015      	b.n	800305a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302e:	f7fe fd25 	bl	8001a7c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d803      	bhi.n	8003046 <HAL_SPI_Transmit+0x16c>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d102      	bne.n	800304c <HAL_SPI_Transmit+0x172>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003058:	e0ab      	b.n	80031b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ca      	bne.n	8002ffa <HAL_SPI_Transmit+0x120>
 8003064:	e080      	b.n	8003168 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_SPI_Transmit+0x19a>
 800306e:	8afb      	ldrh	r3, [r7, #22]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d174      	bne.n	800315e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d912      	bls.n	80030a4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	881a      	ldrh	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308e:	1c9a      	adds	r2, r3, #2
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b02      	subs	r3, #2
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030a2:	e05c      	b.n	800315e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030ca:	e048      	b.n	800315e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d12b      	bne.n	8003132 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d912      	bls.n	800310a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b02      	subs	r3, #2
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003108:	e029      	b.n	800315e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003130:	e015      	b.n	800315e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003132:	f7fe fca3 	bl	8001a7c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d803      	bhi.n	800314a <HAL_SPI_Transmit+0x270>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Transmit+0x276>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800315c:	e029      	b.n	80031b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1b1      	bne.n	80030cc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	6839      	ldr	r1, [r7, #0]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fb69 	bl	8003844 <SPI_EndRxTxTransaction>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e003      	b.n	80031b2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	@ 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031d2:	2301      	movs	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x26>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e20a      	b.n	8003600 <HAL_SPI_TransmitReceive+0x43c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f2:	f7fe fc43 	bl	8001a7c <HAL_GetTick>
 80031f6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031fe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800320e:	7efb      	ldrb	r3, [r7, #27]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d00e      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x6e>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800321a:	d106      	bne.n	800322a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_SPI_TransmitReceive+0x66>
 8003224:	7efb      	ldrb	r3, [r7, #27]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800322a:	2302      	movs	r3, #2
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003230:	e1e0      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_SPI_TransmitReceive+0x80>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_SPI_TransmitReceive+0x80>
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800324a:	e1d3      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b04      	cmp	r3, #4
 8003256:	d003      	beq.n	8003260 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2205      	movs	r2, #5
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a2:	d802      	bhi.n	80032aa <HAL_SPI_TransmitReceive+0xe6>
 80032a4:	8a3b      	ldrh	r3, [r7, #16]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d908      	bls.n	80032bc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	e007      	b.n	80032cc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	d007      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032f2:	f240 8081 	bls.w	80033f8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x140>
 80032fe:	8a7b      	ldrh	r3, [r7, #18]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d16d      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003328:	e05a      	b.n	80033e0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d11b      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x1ac>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x1ac>
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	2b01      	cmp	r3, #1
 8003346:	d113      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d11c      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x1f4>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	b292      	uxth	r2, r2
 8003396:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	1c9a      	adds	r2, r3, #2
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b8:	f7fe fb60 	bl	8001a7c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d80b      	bhi.n	80033e0 <HAL_SPI_TransmitReceive+0x21c>
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d007      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80033de:	e109      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d19f      	bne.n	800332a <HAL_SPI_TransmitReceive+0x166>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d199      	bne.n	800332a <HAL_SPI_TransmitReceive+0x166>
 80033f6:	e0e3      	b.n	80035c0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x244>
 8003400:	8a7b      	ldrh	r3, [r7, #18]
 8003402:	2b01      	cmp	r3, #1
 8003404:	f040 80cf 	bne.w	80035a6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d912      	bls.n	8003438 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	1c9a      	adds	r2, r3, #2
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b02      	subs	r3, #2
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003436:	e0b6      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345e:	e0a2      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d134      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x314>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02f      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x314>
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	2b01      	cmp	r3, #1
 800347c:	d12c      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d912      	bls.n	80034ae <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	1c9a      	adds	r2, r3, #2
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b02      	subs	r3, #2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034ac:	e012      	b.n	80034d4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	7812      	ldrb	r2, [r2, #0]
 80034ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d148      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x3b4>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d042      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d923      	bls.n	8003546 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	b292      	uxth	r2, r2
 800350a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b02      	subs	r3, #2
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d81f      	bhi.n	8003574 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	e016      	b.n	8003574 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f103 020c 	add.w	r2, r3, #12
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003578:	f7fe fa80 	bl	8001a7c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003584:	429a      	cmp	r2, r3
 8003586:	d803      	bhi.n	8003590 <HAL_SPI_TransmitReceive+0x3cc>
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d102      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x3d2>
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80035a4:	e026      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f af57 	bne.w	8003460 <HAL_SPI_TransmitReceive+0x29c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f47f af50 	bne.w	8003460 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f93d 	bl	8003844 <SPI_EndRxTxTransaction>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ea:	e003      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80035fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003600:	4618      	mov	r0, r3
 8003602:	3728      	adds	r7, #40	@ 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003618:	f7fe fa30 	bl	8001a7c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4413      	add	r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003628:	f7fe fa28 	bl	8001a7c <HAL_GetTick>
 800362c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800362e:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	0d1b      	lsrs	r3, r3, #20
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363e:	e054      	b.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d050      	beq.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003648:	f7fe fa18 	bl	8001a7c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	429a      	cmp	r2, r3
 8003656:	d902      	bls.n	800365e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d13d      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800366c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003676:	d111      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003680:	d004      	beq.n	800368c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	d107      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800369a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	d10f      	bne.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e017      	b.n	800370a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d19b      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000015c 	.word	0x2000015c

08003718 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800372a:	f7fe f9a7 	bl	8001a7c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4413      	add	r3, r2
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800373a:	f7fe f99f 	bl	8001a7c <HAL_GetTick>
 800373e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003748:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00da      	lsls	r2, r3, #3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	0d1b      	lsrs	r3, r3, #20
 8003758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003760:	e060      	b.n	8003824 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003768:	d107      	bne.n	800377a <SPI_WaitFifoStateUntilTimeout+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003778:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d050      	beq.n	8003824 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003782:	f7fe f97b 	bl	8001a7c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	429a      	cmp	r2, r3
 8003790:	d902      	bls.n	8003798 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d13d      	bne.n	8003814 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b0:	d111      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ba:	d004      	beq.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d107      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037de:	d10f      	bne.n	8003800 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e010      	b.n	8003836 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	3b01      	subs	r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d196      	bne.n	8003762 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3728      	adds	r7, #40	@ 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2000015c 	.word	0x2000015c

08003844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2200      	movs	r2, #0
 8003858:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff ff5b 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e027      	b.n	80038c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	@ 0x80
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fec0 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e014      	b.n	80038c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff ff34 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e000      	b.n	80038c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <malloc>:
 80038d0:	4b02      	ldr	r3, [pc, #8]	@ (80038dc <malloc+0xc>)
 80038d2:	4601      	mov	r1, r0
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	f000 b82d 	b.w	8003934 <_malloc_r>
 80038da:	bf00      	nop
 80038dc:	20000168 	.word	0x20000168

080038e0 <free>:
 80038e0:	4b02      	ldr	r3, [pc, #8]	@ (80038ec <free+0xc>)
 80038e2:	4601      	mov	r1, r0
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f000 b923 	b.w	8003b30 <_free_r>
 80038ea:	bf00      	nop
 80038ec:	20000168 	.word	0x20000168

080038f0 <sbrk_aligned>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003930 <sbrk_aligned+0x40>)
 80038f4:	460c      	mov	r4, r1
 80038f6:	6831      	ldr	r1, [r6, #0]
 80038f8:	4605      	mov	r5, r0
 80038fa:	b911      	cbnz	r1, 8003902 <sbrk_aligned+0x12>
 80038fc:	f000 f8ce 	bl	8003a9c <_sbrk_r>
 8003900:	6030      	str	r0, [r6, #0]
 8003902:	4621      	mov	r1, r4
 8003904:	4628      	mov	r0, r5
 8003906:	f000 f8c9 	bl	8003a9c <_sbrk_r>
 800390a:	1c43      	adds	r3, r0, #1
 800390c:	d103      	bne.n	8003916 <sbrk_aligned+0x26>
 800390e:	f04f 34ff 	mov.w	r4, #4294967295
 8003912:	4620      	mov	r0, r4
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	1cc4      	adds	r4, r0, #3
 8003918:	f024 0403 	bic.w	r4, r4, #3
 800391c:	42a0      	cmp	r0, r4
 800391e:	d0f8      	beq.n	8003912 <sbrk_aligned+0x22>
 8003920:	1a21      	subs	r1, r4, r0
 8003922:	4628      	mov	r0, r5
 8003924:	f000 f8ba 	bl	8003a9c <_sbrk_r>
 8003928:	3001      	adds	r0, #1
 800392a:	d1f2      	bne.n	8003912 <sbrk_aligned+0x22>
 800392c:	e7ef      	b.n	800390e <sbrk_aligned+0x1e>
 800392e:	bf00      	nop
 8003930:	20000364 	.word	0x20000364

08003934 <_malloc_r>:
 8003934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003938:	1ccd      	adds	r5, r1, #3
 800393a:	f025 0503 	bic.w	r5, r5, #3
 800393e:	3508      	adds	r5, #8
 8003940:	2d0c      	cmp	r5, #12
 8003942:	bf38      	it	cc
 8003944:	250c      	movcc	r5, #12
 8003946:	2d00      	cmp	r5, #0
 8003948:	4606      	mov	r6, r0
 800394a:	db01      	blt.n	8003950 <_malloc_r+0x1c>
 800394c:	42a9      	cmp	r1, r5
 800394e:	d904      	bls.n	800395a <_malloc_r+0x26>
 8003950:	230c      	movs	r3, #12
 8003952:	6033      	str	r3, [r6, #0]
 8003954:	2000      	movs	r0, #0
 8003956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800395a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a30 <_malloc_r+0xfc>
 800395e:	f000 f869 	bl	8003a34 <__malloc_lock>
 8003962:	f8d8 3000 	ldr.w	r3, [r8]
 8003966:	461c      	mov	r4, r3
 8003968:	bb44      	cbnz	r4, 80039bc <_malloc_r+0x88>
 800396a:	4629      	mov	r1, r5
 800396c:	4630      	mov	r0, r6
 800396e:	f7ff ffbf 	bl	80038f0 <sbrk_aligned>
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	4604      	mov	r4, r0
 8003976:	d158      	bne.n	8003a2a <_malloc_r+0xf6>
 8003978:	f8d8 4000 	ldr.w	r4, [r8]
 800397c:	4627      	mov	r7, r4
 800397e:	2f00      	cmp	r7, #0
 8003980:	d143      	bne.n	8003a0a <_malloc_r+0xd6>
 8003982:	2c00      	cmp	r4, #0
 8003984:	d04b      	beq.n	8003a1e <_malloc_r+0xea>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	4639      	mov	r1, r7
 800398a:	4630      	mov	r0, r6
 800398c:	eb04 0903 	add.w	r9, r4, r3
 8003990:	f000 f884 	bl	8003a9c <_sbrk_r>
 8003994:	4581      	cmp	r9, r0
 8003996:	d142      	bne.n	8003a1e <_malloc_r+0xea>
 8003998:	6821      	ldr	r1, [r4, #0]
 800399a:	1a6d      	subs	r5, r5, r1
 800399c:	4629      	mov	r1, r5
 800399e:	4630      	mov	r0, r6
 80039a0:	f7ff ffa6 	bl	80038f0 <sbrk_aligned>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d03a      	beq.n	8003a1e <_malloc_r+0xea>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	442b      	add	r3, r5
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	f8d8 3000 	ldr.w	r3, [r8]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	bb62      	cbnz	r2, 8003a10 <_malloc_r+0xdc>
 80039b6:	f8c8 7000 	str.w	r7, [r8]
 80039ba:	e00f      	b.n	80039dc <_malloc_r+0xa8>
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	1b52      	subs	r2, r2, r5
 80039c0:	d420      	bmi.n	8003a04 <_malloc_r+0xd0>
 80039c2:	2a0b      	cmp	r2, #11
 80039c4:	d917      	bls.n	80039f6 <_malloc_r+0xc2>
 80039c6:	1961      	adds	r1, r4, r5
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	6025      	str	r5, [r4, #0]
 80039cc:	bf18      	it	ne
 80039ce:	6059      	strne	r1, [r3, #4]
 80039d0:	6863      	ldr	r3, [r4, #4]
 80039d2:	bf08      	it	eq
 80039d4:	f8c8 1000 	streq.w	r1, [r8]
 80039d8:	5162      	str	r2, [r4, r5]
 80039da:	604b      	str	r3, [r1, #4]
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 f82f 	bl	8003a40 <__malloc_unlock>
 80039e2:	f104 000b 	add.w	r0, r4, #11
 80039e6:	1d23      	adds	r3, r4, #4
 80039e8:	f020 0007 	bic.w	r0, r0, #7
 80039ec:	1ac2      	subs	r2, r0, r3
 80039ee:	bf1c      	itt	ne
 80039f0:	1a1b      	subne	r3, r3, r0
 80039f2:	50a3      	strne	r3, [r4, r2]
 80039f4:	e7af      	b.n	8003956 <_malloc_r+0x22>
 80039f6:	6862      	ldr	r2, [r4, #4]
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	bf0c      	ite	eq
 80039fc:	f8c8 2000 	streq.w	r2, [r8]
 8003a00:	605a      	strne	r2, [r3, #4]
 8003a02:	e7eb      	b.n	80039dc <_malloc_r+0xa8>
 8003a04:	4623      	mov	r3, r4
 8003a06:	6864      	ldr	r4, [r4, #4]
 8003a08:	e7ae      	b.n	8003968 <_malloc_r+0x34>
 8003a0a:	463c      	mov	r4, r7
 8003a0c:	687f      	ldr	r7, [r7, #4]
 8003a0e:	e7b6      	b.n	800397e <_malloc_r+0x4a>
 8003a10:	461a      	mov	r2, r3
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	d1fb      	bne.n	8003a10 <_malloc_r+0xdc>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6053      	str	r3, [r2, #4]
 8003a1c:	e7de      	b.n	80039dc <_malloc_r+0xa8>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	4630      	mov	r0, r6
 8003a24:	f000 f80c 	bl	8003a40 <__malloc_unlock>
 8003a28:	e794      	b.n	8003954 <_malloc_r+0x20>
 8003a2a:	6005      	str	r5, [r0, #0]
 8003a2c:	e7d6      	b.n	80039dc <_malloc_r+0xa8>
 8003a2e:	bf00      	nop
 8003a30:	20000368 	.word	0x20000368

08003a34 <__malloc_lock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	@ (8003a3c <__malloc_lock+0x8>)
 8003a36:	f000 b86b 	b.w	8003b10 <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	200004a8 	.word	0x200004a8

08003a40 <__malloc_unlock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	@ (8003a48 <__malloc_unlock+0x8>)
 8003a42:	f000 b866 	b.w	8003b12 <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	200004a8 	.word	0x200004a8

08003a4c <siprintf>:
 8003a4c:	b40e      	push	{r1, r2, r3}
 8003a4e:	b500      	push	{lr}
 8003a50:	b09c      	sub	sp, #112	@ 0x70
 8003a52:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9006      	str	r0, [sp, #24]
 8003a58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a5c:	4809      	ldr	r0, [pc, #36]	@ (8003a84 <siprintf+0x38>)
 8003a5e:	9107      	str	r1, [sp, #28]
 8003a60:	9104      	str	r1, [sp, #16]
 8003a62:	4909      	ldr	r1, [pc, #36]	@ (8003a88 <siprintf+0x3c>)
 8003a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a68:	9105      	str	r1, [sp, #20]
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	a902      	add	r1, sp, #8
 8003a70:	f000 f904 	bl	8003c7c <_svfiprintf_r>
 8003a74:	9b02      	ldr	r3, [sp, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	b01c      	add	sp, #112	@ 0x70
 8003a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a80:	b003      	add	sp, #12
 8003a82:	4770      	bx	lr
 8003a84:	20000168 	.word	0x20000168
 8003a88:	ffff0208 	.word	0xffff0208

08003a8c <memset>:
 8003a8c:	4402      	add	r2, r0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d100      	bne.n	8003a96 <memset+0xa>
 8003a94:	4770      	bx	lr
 8003a96:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9a:	e7f9      	b.n	8003a90 <memset+0x4>

08003a9c <_sbrk_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4d06      	ldr	r5, [pc, #24]	@ (8003ab8 <_sbrk_r+0x1c>)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	f7fd fef4 	bl	8001894 <_sbrk>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_sbrk_r+0x1a>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_sbrk_r+0x1a>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	200004a4 	.word	0x200004a4

08003abc <__errno>:
 8003abc:	4b01      	ldr	r3, [pc, #4]	@ (8003ac4 <__errno+0x8>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000168 	.word	0x20000168

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	4d0d      	ldr	r5, [pc, #52]	@ (8003b00 <__libc_init_array+0x38>)
 8003acc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b04 <__libc_init_array+0x3c>)
 8003ace:	1b64      	subs	r4, r4, r5
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	42a6      	cmp	r6, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b08 <__libc_init_array+0x40>)
 8003ada:	4c0c      	ldr	r4, [pc, #48]	@ (8003b0c <__libc_init_array+0x44>)
 8003adc:	f000 fba8 	bl	8004230 <_init>
 8003ae0:	1b64      	subs	r4, r4, r5
 8003ae2:	10a4      	asrs	r4, r4, #2
 8003ae4:	2600      	movs	r6, #0
 8003ae6:	42a6      	cmp	r6, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af0:	4798      	blx	r3
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afa:	4798      	blx	r3
 8003afc:	3601      	adds	r6, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	080042f4 	.word	0x080042f4
 8003b04:	080042f4 	.word	0x080042f4
 8003b08:	080042f4 	.word	0x080042f4
 8003b0c:	080042f8 	.word	0x080042f8

08003b10 <__retarget_lock_acquire_recursive>:
 8003b10:	4770      	bx	lr

08003b12 <__retarget_lock_release_recursive>:
 8003b12:	4770      	bx	lr

08003b14 <memcpy>:
 8003b14:	440a      	add	r2, r1
 8003b16:	4291      	cmp	r1, r2
 8003b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b1c:	d100      	bne.n	8003b20 <memcpy+0xc>
 8003b1e:	4770      	bx	lr
 8003b20:	b510      	push	{r4, lr}
 8003b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b2a:	4291      	cmp	r1, r2
 8003b2c:	d1f9      	bne.n	8003b22 <memcpy+0xe>
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <_free_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4605      	mov	r5, r0
 8003b34:	2900      	cmp	r1, #0
 8003b36:	d041      	beq.n	8003bbc <_free_r+0x8c>
 8003b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b3c:	1f0c      	subs	r4, r1, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfb8      	it	lt
 8003b42:	18e4      	addlt	r4, r4, r3
 8003b44:	f7ff ff76 	bl	8003a34 <__malloc_lock>
 8003b48:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc0 <_free_r+0x90>)
 8003b4a:	6813      	ldr	r3, [r2, #0]
 8003b4c:	b933      	cbnz	r3, 8003b5c <_free_r+0x2c>
 8003b4e:	6063      	str	r3, [r4, #4]
 8003b50:	6014      	str	r4, [r2, #0]
 8003b52:	4628      	mov	r0, r5
 8003b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b58:	f7ff bf72 	b.w	8003a40 <__malloc_unlock>
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	d908      	bls.n	8003b72 <_free_r+0x42>
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	1821      	adds	r1, r4, r0
 8003b64:	428b      	cmp	r3, r1
 8003b66:	bf01      	itttt	eq
 8003b68:	6819      	ldreq	r1, [r3, #0]
 8003b6a:	685b      	ldreq	r3, [r3, #4]
 8003b6c:	1809      	addeq	r1, r1, r0
 8003b6e:	6021      	streq	r1, [r4, #0]
 8003b70:	e7ed      	b.n	8003b4e <_free_r+0x1e>
 8003b72:	461a      	mov	r2, r3
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	b10b      	cbz	r3, 8003b7c <_free_r+0x4c>
 8003b78:	42a3      	cmp	r3, r4
 8003b7a:	d9fa      	bls.n	8003b72 <_free_r+0x42>
 8003b7c:	6811      	ldr	r1, [r2, #0]
 8003b7e:	1850      	adds	r0, r2, r1
 8003b80:	42a0      	cmp	r0, r4
 8003b82:	d10b      	bne.n	8003b9c <_free_r+0x6c>
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	4401      	add	r1, r0
 8003b88:	1850      	adds	r0, r2, r1
 8003b8a:	4283      	cmp	r3, r0
 8003b8c:	6011      	str	r1, [r2, #0]
 8003b8e:	d1e0      	bne.n	8003b52 <_free_r+0x22>
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	6053      	str	r3, [r2, #4]
 8003b96:	4408      	add	r0, r1
 8003b98:	6010      	str	r0, [r2, #0]
 8003b9a:	e7da      	b.n	8003b52 <_free_r+0x22>
 8003b9c:	d902      	bls.n	8003ba4 <_free_r+0x74>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	602b      	str	r3, [r5, #0]
 8003ba2:	e7d6      	b.n	8003b52 <_free_r+0x22>
 8003ba4:	6820      	ldr	r0, [r4, #0]
 8003ba6:	1821      	adds	r1, r4, r0
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	bf04      	itt	eq
 8003bac:	6819      	ldreq	r1, [r3, #0]
 8003bae:	685b      	ldreq	r3, [r3, #4]
 8003bb0:	6063      	str	r3, [r4, #4]
 8003bb2:	bf04      	itt	eq
 8003bb4:	1809      	addeq	r1, r1, r0
 8003bb6:	6021      	streq	r1, [r4, #0]
 8003bb8:	6054      	str	r4, [r2, #4]
 8003bba:	e7ca      	b.n	8003b52 <_free_r+0x22>
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000368 	.word	0x20000368

08003bc4 <__ssputs_r>:
 8003bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	688e      	ldr	r6, [r1, #8]
 8003bca:	461f      	mov	r7, r3
 8003bcc:	42be      	cmp	r6, r7
 8003bce:	680b      	ldr	r3, [r1, #0]
 8003bd0:	4682      	mov	sl, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	d82d      	bhi.n	8003c34 <__ssputs_r+0x70>
 8003bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003be0:	d026      	beq.n	8003c30 <__ssputs_r+0x6c>
 8003be2:	6965      	ldr	r5, [r4, #20]
 8003be4:	6909      	ldr	r1, [r1, #16]
 8003be6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bea:	eba3 0901 	sub.w	r9, r3, r1
 8003bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bf2:	1c7b      	adds	r3, r7, #1
 8003bf4:	444b      	add	r3, r9
 8003bf6:	106d      	asrs	r5, r5, #1
 8003bf8:	429d      	cmp	r5, r3
 8003bfa:	bf38      	it	cc
 8003bfc:	461d      	movcc	r5, r3
 8003bfe:	0553      	lsls	r3, r2, #21
 8003c00:	d527      	bpl.n	8003c52 <__ssputs_r+0x8e>
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7ff fe96 	bl	8003934 <_malloc_r>
 8003c08:	4606      	mov	r6, r0
 8003c0a:	b360      	cbz	r0, 8003c66 <__ssputs_r+0xa2>
 8003c0c:	6921      	ldr	r1, [r4, #16]
 8003c0e:	464a      	mov	r2, r9
 8003c10:	f7ff ff80 	bl	8003b14 <memcpy>
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	6126      	str	r6, [r4, #16]
 8003c22:	6165      	str	r5, [r4, #20]
 8003c24:	444e      	add	r6, r9
 8003c26:	eba5 0509 	sub.w	r5, r5, r9
 8003c2a:	6026      	str	r6, [r4, #0]
 8003c2c:	60a5      	str	r5, [r4, #8]
 8003c2e:	463e      	mov	r6, r7
 8003c30:	42be      	cmp	r6, r7
 8003c32:	d900      	bls.n	8003c36 <__ssputs_r+0x72>
 8003c34:	463e      	mov	r6, r7
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	4632      	mov	r2, r6
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	f000 faa8 	bl	8004190 <memmove>
 8003c40:	68a3      	ldr	r3, [r4, #8]
 8003c42:	1b9b      	subs	r3, r3, r6
 8003c44:	60a3      	str	r3, [r4, #8]
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	4433      	add	r3, r6
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c52:	462a      	mov	r2, r5
 8003c54:	f000 fab6 	bl	80041c4 <_realloc_r>
 8003c58:	4606      	mov	r6, r0
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d1e0      	bne.n	8003c20 <__ssputs_r+0x5c>
 8003c5e:	6921      	ldr	r1, [r4, #16]
 8003c60:	4650      	mov	r0, sl
 8003c62:	f7ff ff65 	bl	8003b30 <_free_r>
 8003c66:	230c      	movs	r3, #12
 8003c68:	f8ca 3000 	str.w	r3, [sl]
 8003c6c:	89a3      	ldrh	r3, [r4, #12]
 8003c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	e7e9      	b.n	8003c4e <__ssputs_r+0x8a>
	...

08003c7c <_svfiprintf_r>:
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	4698      	mov	r8, r3
 8003c82:	898b      	ldrh	r3, [r1, #12]
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	b09d      	sub	sp, #116	@ 0x74
 8003c88:	4607      	mov	r7, r0
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	d510      	bpl.n	8003cb2 <_svfiprintf_r+0x36>
 8003c90:	690b      	ldr	r3, [r1, #16]
 8003c92:	b973      	cbnz	r3, 8003cb2 <_svfiprintf_r+0x36>
 8003c94:	2140      	movs	r1, #64	@ 0x40
 8003c96:	f7ff fe4d 	bl	8003934 <_malloc_r>
 8003c9a:	6028      	str	r0, [r5, #0]
 8003c9c:	6128      	str	r0, [r5, #16]
 8003c9e:	b930      	cbnz	r0, 8003cae <_svfiprintf_r+0x32>
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b01d      	add	sp, #116	@ 0x74
 8003caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	2340      	movs	r3, #64	@ 0x40
 8003cb0:	616b      	str	r3, [r5, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cc0:	2330      	movs	r3, #48	@ 0x30
 8003cc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e60 <_svfiprintf_r+0x1e4>
 8003cc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cca:	f04f 0901 	mov.w	r9, #1
 8003cce:	4623      	mov	r3, r4
 8003cd0:	469a      	mov	sl, r3
 8003cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd6:	b10a      	cbz	r2, 8003cdc <_svfiprintf_r+0x60>
 8003cd8:	2a25      	cmp	r2, #37	@ 0x25
 8003cda:	d1f9      	bne.n	8003cd0 <_svfiprintf_r+0x54>
 8003cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce0:	d00b      	beq.n	8003cfa <_svfiprintf_r+0x7e>
 8003ce2:	465b      	mov	r3, fp
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4638      	mov	r0, r7
 8003cea:	f7ff ff6b 	bl	8003bc4 <__ssputs_r>
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f000 80a7 	beq.w	8003e42 <_svfiprintf_r+0x1c6>
 8003cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cf6:	445a      	add	r2, fp
 8003cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 809f 	beq.w	8003e42 <_svfiprintf_r+0x1c6>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d0e:	f10a 0a01 	add.w	sl, sl, #1
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	9307      	str	r3, [sp, #28]
 8003d16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d1c:	4654      	mov	r4, sl
 8003d1e:	2205      	movs	r2, #5
 8003d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d24:	484e      	ldr	r0, [pc, #312]	@ (8003e60 <_svfiprintf_r+0x1e4>)
 8003d26:	f7fc fa5b 	bl	80001e0 <memchr>
 8003d2a:	9a04      	ldr	r2, [sp, #16]
 8003d2c:	b9d8      	cbnz	r0, 8003d66 <_svfiprintf_r+0xea>
 8003d2e:	06d0      	lsls	r0, r2, #27
 8003d30:	bf44      	itt	mi
 8003d32:	2320      	movmi	r3, #32
 8003d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d38:	0711      	lsls	r1, r2, #28
 8003d3a:	bf44      	itt	mi
 8003d3c:	232b      	movmi	r3, #43	@ 0x2b
 8003d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d42:	f89a 3000 	ldrb.w	r3, [sl]
 8003d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d48:	d015      	beq.n	8003d76 <_svfiprintf_r+0xfa>
 8003d4a:	9a07      	ldr	r2, [sp, #28]
 8003d4c:	4654      	mov	r4, sl
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f04f 0c0a 	mov.w	ip, #10
 8003d54:	4621      	mov	r1, r4
 8003d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5a:	3b30      	subs	r3, #48	@ 0x30
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d94b      	bls.n	8003df8 <_svfiprintf_r+0x17c>
 8003d60:	b1b0      	cbz	r0, 8003d90 <_svfiprintf_r+0x114>
 8003d62:	9207      	str	r2, [sp, #28]
 8003d64:	e014      	b.n	8003d90 <_svfiprintf_r+0x114>
 8003d66:	eba0 0308 	sub.w	r3, r0, r8
 8003d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	9304      	str	r3, [sp, #16]
 8003d72:	46a2      	mov	sl, r4
 8003d74:	e7d2      	b.n	8003d1c <_svfiprintf_r+0xa0>
 8003d76:	9b03      	ldr	r3, [sp, #12]
 8003d78:	1d19      	adds	r1, r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	9103      	str	r1, [sp, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfbb      	ittet	lt
 8003d82:	425b      	neglt	r3, r3
 8003d84:	f042 0202 	orrlt.w	r2, r2, #2
 8003d88:	9307      	strge	r3, [sp, #28]
 8003d8a:	9307      	strlt	r3, [sp, #28]
 8003d8c:	bfb8      	it	lt
 8003d8e:	9204      	strlt	r2, [sp, #16]
 8003d90:	7823      	ldrb	r3, [r4, #0]
 8003d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d94:	d10a      	bne.n	8003dac <_svfiprintf_r+0x130>
 8003d96:	7863      	ldrb	r3, [r4, #1]
 8003d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d9a:	d132      	bne.n	8003e02 <_svfiprintf_r+0x186>
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003da8:	3402      	adds	r4, #2
 8003daa:	9305      	str	r3, [sp, #20]
 8003dac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e70 <_svfiprintf_r+0x1f4>
 8003db0:	7821      	ldrb	r1, [r4, #0]
 8003db2:	2203      	movs	r2, #3
 8003db4:	4650      	mov	r0, sl
 8003db6:	f7fc fa13 	bl	80001e0 <memchr>
 8003dba:	b138      	cbz	r0, 8003dcc <_svfiprintf_r+0x150>
 8003dbc:	9b04      	ldr	r3, [sp, #16]
 8003dbe:	eba0 000a 	sub.w	r0, r0, sl
 8003dc2:	2240      	movs	r2, #64	@ 0x40
 8003dc4:	4082      	lsls	r2, r0
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	3401      	adds	r4, #1
 8003dca:	9304      	str	r3, [sp, #16]
 8003dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd0:	4824      	ldr	r0, [pc, #144]	@ (8003e64 <_svfiprintf_r+0x1e8>)
 8003dd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dd6:	2206      	movs	r2, #6
 8003dd8:	f7fc fa02 	bl	80001e0 <memchr>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d036      	beq.n	8003e4e <_svfiprintf_r+0x1d2>
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <_svfiprintf_r+0x1ec>)
 8003de2:	bb1b      	cbnz	r3, 8003e2c <_svfiprintf_r+0x1b0>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	3307      	adds	r3, #7
 8003de8:	f023 0307 	bic.w	r3, r3, #7
 8003dec:	3308      	adds	r3, #8
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df2:	4433      	add	r3, r6
 8003df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003df6:	e76a      	b.n	8003cce <_svfiprintf_r+0x52>
 8003df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	2001      	movs	r0, #1
 8003e00:	e7a8      	b.n	8003d54 <_svfiprintf_r+0xd8>
 8003e02:	2300      	movs	r3, #0
 8003e04:	3401      	adds	r4, #1
 8003e06:	9305      	str	r3, [sp, #20]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f04f 0c0a 	mov.w	ip, #10
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e14:	3a30      	subs	r2, #48	@ 0x30
 8003e16:	2a09      	cmp	r2, #9
 8003e18:	d903      	bls.n	8003e22 <_svfiprintf_r+0x1a6>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0c6      	beq.n	8003dac <_svfiprintf_r+0x130>
 8003e1e:	9105      	str	r1, [sp, #20]
 8003e20:	e7c4      	b.n	8003dac <_svfiprintf_r+0x130>
 8003e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e26:	4604      	mov	r4, r0
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e7f0      	b.n	8003e0e <_svfiprintf_r+0x192>
 8003e2c:	ab03      	add	r3, sp, #12
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	462a      	mov	r2, r5
 8003e32:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <_svfiprintf_r+0x1f0>)
 8003e34:	a904      	add	r1, sp, #16
 8003e36:	4638      	mov	r0, r7
 8003e38:	f3af 8000 	nop.w
 8003e3c:	1c42      	adds	r2, r0, #1
 8003e3e:	4606      	mov	r6, r0
 8003e40:	d1d6      	bne.n	8003df0 <_svfiprintf_r+0x174>
 8003e42:	89ab      	ldrh	r3, [r5, #12]
 8003e44:	065b      	lsls	r3, r3, #25
 8003e46:	f53f af2d 	bmi.w	8003ca4 <_svfiprintf_r+0x28>
 8003e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e4c:	e72c      	b.n	8003ca8 <_svfiprintf_r+0x2c>
 8003e4e:	ab03      	add	r3, sp, #12
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	462a      	mov	r2, r5
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <_svfiprintf_r+0x1f0>)
 8003e56:	a904      	add	r1, sp, #16
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f000 f879 	bl	8003f50 <_printf_i>
 8003e5e:	e7ed      	b.n	8003e3c <_svfiprintf_r+0x1c0>
 8003e60:	080042b8 	.word	0x080042b8
 8003e64:	080042c2 	.word	0x080042c2
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	08003bc5 	.word	0x08003bc5
 8003e70:	080042be 	.word	0x080042be

08003e74 <_printf_common>:
 8003e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	4616      	mov	r6, r2
 8003e7a:	4698      	mov	r8, r3
 8003e7c:	688a      	ldr	r2, [r1, #8]
 8003e7e:	690b      	ldr	r3, [r1, #16]
 8003e80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bfb8      	it	lt
 8003e88:	4613      	movlt	r3, r2
 8003e8a:	6033      	str	r3, [r6, #0]
 8003e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e90:	4607      	mov	r7, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	b10a      	cbz	r2, 8003e9a <_printf_common+0x26>
 8003e96:	3301      	adds	r3, #1
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	0699      	lsls	r1, r3, #26
 8003e9e:	bf42      	ittt	mi
 8003ea0:	6833      	ldrmi	r3, [r6, #0]
 8003ea2:	3302      	addmi	r3, #2
 8003ea4:	6033      	strmi	r3, [r6, #0]
 8003ea6:	6825      	ldr	r5, [r4, #0]
 8003ea8:	f015 0506 	ands.w	r5, r5, #6
 8003eac:	d106      	bne.n	8003ebc <_printf_common+0x48>
 8003eae:	f104 0a19 	add.w	sl, r4, #25
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	6832      	ldr	r2, [r6, #0]
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	42ab      	cmp	r3, r5
 8003eba:	dc26      	bgt.n	8003f0a <_printf_common+0x96>
 8003ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	3b00      	subs	r3, #0
 8003ec4:	bf18      	it	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	0692      	lsls	r2, r2, #26
 8003eca:	d42b      	bmi.n	8003f24 <_printf_common+0xb0>
 8003ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	47c8      	blx	r9
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d01e      	beq.n	8003f18 <_printf_common+0xa4>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf02      	ittt	eq
 8003ee6:	68e5      	ldreq	r5, [r4, #12]
 8003ee8:	6833      	ldreq	r3, [r6, #0]
 8003eea:	1aed      	subeq	r5, r5, r3
 8003eec:	68a3      	ldr	r3, [r4, #8]
 8003eee:	bf0c      	ite	eq
 8003ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef4:	2500      	movne	r5, #0
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	bfc4      	itt	gt
 8003efa:	1a9b      	subgt	r3, r3, r2
 8003efc:	18ed      	addgt	r5, r5, r3
 8003efe:	2600      	movs	r6, #0
 8003f00:	341a      	adds	r4, #26
 8003f02:	42b5      	cmp	r5, r6
 8003f04:	d11a      	bne.n	8003f3c <_printf_common+0xc8>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e008      	b.n	8003f1c <_printf_common+0xa8>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4652      	mov	r2, sl
 8003f0e:	4641      	mov	r1, r8
 8003f10:	4638      	mov	r0, r7
 8003f12:	47c8      	blx	r9
 8003f14:	3001      	adds	r0, #1
 8003f16:	d103      	bne.n	8003f20 <_printf_common+0xac>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f20:	3501      	adds	r5, #1
 8003f22:	e7c6      	b.n	8003eb2 <_printf_common+0x3e>
 8003f24:	18e1      	adds	r1, r4, r3
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	2030      	movs	r0, #48	@ 0x30
 8003f2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f2e:	4422      	add	r2, r4
 8003f30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f38:	3302      	adds	r3, #2
 8003f3a:	e7c7      	b.n	8003ecc <_printf_common+0x58>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4622      	mov	r2, r4
 8003f40:	4641      	mov	r1, r8
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c8      	blx	r9
 8003f46:	3001      	adds	r0, #1
 8003f48:	d0e6      	beq.n	8003f18 <_printf_common+0xa4>
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7d9      	b.n	8003f02 <_printf_common+0x8e>
	...

08003f50 <_printf_i>:
 8003f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	7e0f      	ldrb	r7, [r1, #24]
 8003f56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f58:	2f78      	cmp	r7, #120	@ 0x78
 8003f5a:	4691      	mov	r9, r2
 8003f5c:	4680      	mov	r8, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	469a      	mov	sl, r3
 8003f62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f66:	d807      	bhi.n	8003f78 <_printf_i+0x28>
 8003f68:	2f62      	cmp	r7, #98	@ 0x62
 8003f6a:	d80a      	bhi.n	8003f82 <_printf_i+0x32>
 8003f6c:	2f00      	cmp	r7, #0
 8003f6e:	f000 80d2 	beq.w	8004116 <_printf_i+0x1c6>
 8003f72:	2f58      	cmp	r7, #88	@ 0x58
 8003f74:	f000 80b9 	beq.w	80040ea <_printf_i+0x19a>
 8003f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f80:	e03a      	b.n	8003ff8 <_printf_i+0xa8>
 8003f82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f86:	2b15      	cmp	r3, #21
 8003f88:	d8f6      	bhi.n	8003f78 <_printf_i+0x28>
 8003f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f90 <_printf_i+0x40>)
 8003f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003ffd 	.word	0x08003ffd
 8003f98:	08003f79 	.word	0x08003f79
 8003f9c:	08003f79 	.word	0x08003f79
 8003fa0:	08003f79 	.word	0x08003f79
 8003fa4:	08003f79 	.word	0x08003f79
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003f79 	.word	0x08003f79
 8003fb0:	08003f79 	.word	0x08003f79
 8003fb4:	08003f79 	.word	0x08003f79
 8003fb8:	08003f79 	.word	0x08003f79
 8003fbc:	080040fd 	.word	0x080040fd
 8003fc0:	08004027 	.word	0x08004027
 8003fc4:	080040b7 	.word	0x080040b7
 8003fc8:	08003f79 	.word	0x08003f79
 8003fcc:	08003f79 	.word	0x08003f79
 8003fd0:	0800411f 	.word	0x0800411f
 8003fd4:	08003f79 	.word	0x08003f79
 8003fd8:	08004027 	.word	0x08004027
 8003fdc:	08003f79 	.word	0x08003f79
 8003fe0:	08003f79 	.word	0x08003f79
 8003fe4:	080040bf 	.word	0x080040bf
 8003fe8:	6833      	ldr	r3, [r6, #0]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6032      	str	r2, [r6, #0]
 8003ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e09d      	b.n	8004138 <_printf_i+0x1e8>
 8003ffc:	6833      	ldr	r3, [r6, #0]
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	1d19      	adds	r1, r3, #4
 8004002:	6031      	str	r1, [r6, #0]
 8004004:	0606      	lsls	r6, r0, #24
 8004006:	d501      	bpl.n	800400c <_printf_i+0xbc>
 8004008:	681d      	ldr	r5, [r3, #0]
 800400a:	e003      	b.n	8004014 <_printf_i+0xc4>
 800400c:	0645      	lsls	r5, r0, #25
 800400e:	d5fb      	bpl.n	8004008 <_printf_i+0xb8>
 8004010:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004014:	2d00      	cmp	r5, #0
 8004016:	da03      	bge.n	8004020 <_printf_i+0xd0>
 8004018:	232d      	movs	r3, #45	@ 0x2d
 800401a:	426d      	negs	r5, r5
 800401c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004020:	4859      	ldr	r0, [pc, #356]	@ (8004188 <_printf_i+0x238>)
 8004022:	230a      	movs	r3, #10
 8004024:	e011      	b.n	800404a <_printf_i+0xfa>
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	0608      	lsls	r0, r1, #24
 800402c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004030:	d402      	bmi.n	8004038 <_printf_i+0xe8>
 8004032:	0649      	lsls	r1, r1, #25
 8004034:	bf48      	it	mi
 8004036:	b2ad      	uxthmi	r5, r5
 8004038:	2f6f      	cmp	r7, #111	@ 0x6f
 800403a:	4853      	ldr	r0, [pc, #332]	@ (8004188 <_printf_i+0x238>)
 800403c:	6033      	str	r3, [r6, #0]
 800403e:	bf14      	ite	ne
 8004040:	230a      	movne	r3, #10
 8004042:	2308      	moveq	r3, #8
 8004044:	2100      	movs	r1, #0
 8004046:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800404a:	6866      	ldr	r6, [r4, #4]
 800404c:	60a6      	str	r6, [r4, #8]
 800404e:	2e00      	cmp	r6, #0
 8004050:	bfa2      	ittt	ge
 8004052:	6821      	ldrge	r1, [r4, #0]
 8004054:	f021 0104 	bicge.w	r1, r1, #4
 8004058:	6021      	strge	r1, [r4, #0]
 800405a:	b90d      	cbnz	r5, 8004060 <_printf_i+0x110>
 800405c:	2e00      	cmp	r6, #0
 800405e:	d04b      	beq.n	80040f8 <_printf_i+0x1a8>
 8004060:	4616      	mov	r6, r2
 8004062:	fbb5 f1f3 	udiv	r1, r5, r3
 8004066:	fb03 5711 	mls	r7, r3, r1, r5
 800406a:	5dc7      	ldrb	r7, [r0, r7]
 800406c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004070:	462f      	mov	r7, r5
 8004072:	42bb      	cmp	r3, r7
 8004074:	460d      	mov	r5, r1
 8004076:	d9f4      	bls.n	8004062 <_printf_i+0x112>
 8004078:	2b08      	cmp	r3, #8
 800407a:	d10b      	bne.n	8004094 <_printf_i+0x144>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	07df      	lsls	r7, r3, #31
 8004080:	d508      	bpl.n	8004094 <_printf_i+0x144>
 8004082:	6923      	ldr	r3, [r4, #16]
 8004084:	6861      	ldr	r1, [r4, #4]
 8004086:	4299      	cmp	r1, r3
 8004088:	bfde      	ittt	le
 800408a:	2330      	movle	r3, #48	@ 0x30
 800408c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004090:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004094:	1b92      	subs	r2, r2, r6
 8004096:	6122      	str	r2, [r4, #16]
 8004098:	f8cd a000 	str.w	sl, [sp]
 800409c:	464b      	mov	r3, r9
 800409e:	aa03      	add	r2, sp, #12
 80040a0:	4621      	mov	r1, r4
 80040a2:	4640      	mov	r0, r8
 80040a4:	f7ff fee6 	bl	8003e74 <_printf_common>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d14a      	bne.n	8004142 <_printf_i+0x1f2>
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	b004      	add	sp, #16
 80040b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	f043 0320 	orr.w	r3, r3, #32
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	4833      	ldr	r0, [pc, #204]	@ (800418c <_printf_i+0x23c>)
 80040c0:	2778      	movs	r7, #120	@ 0x78
 80040c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	6831      	ldr	r1, [r6, #0]
 80040ca:	061f      	lsls	r7, r3, #24
 80040cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80040d0:	d402      	bmi.n	80040d8 <_printf_i+0x188>
 80040d2:	065f      	lsls	r7, r3, #25
 80040d4:	bf48      	it	mi
 80040d6:	b2ad      	uxthmi	r5, r5
 80040d8:	6031      	str	r1, [r6, #0]
 80040da:	07d9      	lsls	r1, r3, #31
 80040dc:	bf44      	itt	mi
 80040de:	f043 0320 	orrmi.w	r3, r3, #32
 80040e2:	6023      	strmi	r3, [r4, #0]
 80040e4:	b11d      	cbz	r5, 80040ee <_printf_i+0x19e>
 80040e6:	2310      	movs	r3, #16
 80040e8:	e7ac      	b.n	8004044 <_printf_i+0xf4>
 80040ea:	4827      	ldr	r0, [pc, #156]	@ (8004188 <_printf_i+0x238>)
 80040ec:	e7e9      	b.n	80040c2 <_printf_i+0x172>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f023 0320 	bic.w	r3, r3, #32
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	e7f6      	b.n	80040e6 <_printf_i+0x196>
 80040f8:	4616      	mov	r6, r2
 80040fa:	e7bd      	b.n	8004078 <_printf_i+0x128>
 80040fc:	6833      	ldr	r3, [r6, #0]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	6961      	ldr	r1, [r4, #20]
 8004102:	1d18      	adds	r0, r3, #4
 8004104:	6030      	str	r0, [r6, #0]
 8004106:	062e      	lsls	r6, r5, #24
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	d501      	bpl.n	8004110 <_printf_i+0x1c0>
 800410c:	6019      	str	r1, [r3, #0]
 800410e:	e002      	b.n	8004116 <_printf_i+0x1c6>
 8004110:	0668      	lsls	r0, r5, #25
 8004112:	d5fb      	bpl.n	800410c <_printf_i+0x1bc>
 8004114:	8019      	strh	r1, [r3, #0]
 8004116:	2300      	movs	r3, #0
 8004118:	6123      	str	r3, [r4, #16]
 800411a:	4616      	mov	r6, r2
 800411c:	e7bc      	b.n	8004098 <_printf_i+0x148>
 800411e:	6833      	ldr	r3, [r6, #0]
 8004120:	1d1a      	adds	r2, r3, #4
 8004122:	6032      	str	r2, [r6, #0]
 8004124:	681e      	ldr	r6, [r3, #0]
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	2100      	movs	r1, #0
 800412a:	4630      	mov	r0, r6
 800412c:	f7fc f858 	bl	80001e0 <memchr>
 8004130:	b108      	cbz	r0, 8004136 <_printf_i+0x1e6>
 8004132:	1b80      	subs	r0, r0, r6
 8004134:	6060      	str	r0, [r4, #4]
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	2300      	movs	r3, #0
 800413c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004140:	e7aa      	b.n	8004098 <_printf_i+0x148>
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	4632      	mov	r2, r6
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	47d0      	blx	sl
 800414c:	3001      	adds	r0, #1
 800414e:	d0ad      	beq.n	80040ac <_printf_i+0x15c>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	079b      	lsls	r3, r3, #30
 8004154:	d413      	bmi.n	800417e <_printf_i+0x22e>
 8004156:	68e0      	ldr	r0, [r4, #12]
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	4298      	cmp	r0, r3
 800415c:	bfb8      	it	lt
 800415e:	4618      	movlt	r0, r3
 8004160:	e7a6      	b.n	80040b0 <_printf_i+0x160>
 8004162:	2301      	movs	r3, #1
 8004164:	4632      	mov	r2, r6
 8004166:	4649      	mov	r1, r9
 8004168:	4640      	mov	r0, r8
 800416a:	47d0      	blx	sl
 800416c:	3001      	adds	r0, #1
 800416e:	d09d      	beq.n	80040ac <_printf_i+0x15c>
 8004170:	3501      	adds	r5, #1
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	9903      	ldr	r1, [sp, #12]
 8004176:	1a5b      	subs	r3, r3, r1
 8004178:	42ab      	cmp	r3, r5
 800417a:	dcf2      	bgt.n	8004162 <_printf_i+0x212>
 800417c:	e7eb      	b.n	8004156 <_printf_i+0x206>
 800417e:	2500      	movs	r5, #0
 8004180:	f104 0619 	add.w	r6, r4, #25
 8004184:	e7f5      	b.n	8004172 <_printf_i+0x222>
 8004186:	bf00      	nop
 8004188:	080042c9 	.word	0x080042c9
 800418c:	080042da 	.word	0x080042da

08004190 <memmove>:
 8004190:	4288      	cmp	r0, r1
 8004192:	b510      	push	{r4, lr}
 8004194:	eb01 0402 	add.w	r4, r1, r2
 8004198:	d902      	bls.n	80041a0 <memmove+0x10>
 800419a:	4284      	cmp	r4, r0
 800419c:	4623      	mov	r3, r4
 800419e:	d807      	bhi.n	80041b0 <memmove+0x20>
 80041a0:	1e43      	subs	r3, r0, #1
 80041a2:	42a1      	cmp	r1, r4
 80041a4:	d008      	beq.n	80041b8 <memmove+0x28>
 80041a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ae:	e7f8      	b.n	80041a2 <memmove+0x12>
 80041b0:	4402      	add	r2, r0
 80041b2:	4601      	mov	r1, r0
 80041b4:	428a      	cmp	r2, r1
 80041b6:	d100      	bne.n	80041ba <memmove+0x2a>
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041c2:	e7f7      	b.n	80041b4 <memmove+0x24>

080041c4 <_realloc_r>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	4680      	mov	r8, r0
 80041ca:	4615      	mov	r5, r2
 80041cc:	460c      	mov	r4, r1
 80041ce:	b921      	cbnz	r1, 80041da <_realloc_r+0x16>
 80041d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041d4:	4611      	mov	r1, r2
 80041d6:	f7ff bbad 	b.w	8003934 <_malloc_r>
 80041da:	b92a      	cbnz	r2, 80041e8 <_realloc_r+0x24>
 80041dc:	f7ff fca8 	bl	8003b30 <_free_r>
 80041e0:	2400      	movs	r4, #0
 80041e2:	4620      	mov	r0, r4
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e8:	f000 f81a 	bl	8004220 <_malloc_usable_size_r>
 80041ec:	4285      	cmp	r5, r0
 80041ee:	4606      	mov	r6, r0
 80041f0:	d802      	bhi.n	80041f8 <_realloc_r+0x34>
 80041f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041f6:	d8f4      	bhi.n	80041e2 <_realloc_r+0x1e>
 80041f8:	4629      	mov	r1, r5
 80041fa:	4640      	mov	r0, r8
 80041fc:	f7ff fb9a 	bl	8003934 <_malloc_r>
 8004200:	4607      	mov	r7, r0
 8004202:	2800      	cmp	r0, #0
 8004204:	d0ec      	beq.n	80041e0 <_realloc_r+0x1c>
 8004206:	42b5      	cmp	r5, r6
 8004208:	462a      	mov	r2, r5
 800420a:	4621      	mov	r1, r4
 800420c:	bf28      	it	cs
 800420e:	4632      	movcs	r2, r6
 8004210:	f7ff fc80 	bl	8003b14 <memcpy>
 8004214:	4621      	mov	r1, r4
 8004216:	4640      	mov	r0, r8
 8004218:	f7ff fc8a 	bl	8003b30 <_free_r>
 800421c:	463c      	mov	r4, r7
 800421e:	e7e0      	b.n	80041e2 <_realloc_r+0x1e>

08004220 <_malloc_usable_size_r>:
 8004220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004224:	1f18      	subs	r0, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfbc      	itt	lt
 800422a:	580b      	ldrlt	r3, [r1, r0]
 800422c:	18c0      	addlt	r0, r0, r3
 800422e:	4770      	bx	lr

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
